// ######################################################################################
// ### Author : Pascal Roobrouck - https://github.com/Strooom                         ###
// ### License : CC 4.0 BY-NC-SA - https://creativecommons.org/licenses/by-nc-sa/4.0/ ###
// ######################################################################################

#pragma once
#include <stdint.h>

class gf256 {
  public:
    static constexpr uint32_t irreduciblePolynomial{0x11D};
    static constexpr uint8_t gf256exp[256]{
        0x01,
        0x02,
        0x04,
        0x08,
        0x10,
        0x20,
        0x40,
        0x80,
        0x1d,
        0x3a,
        0x74,
        0xe8,
        0xcd,
        0x87,
        0x13,
        0x26,
        0x4c,
        0x98,
        0x2d,
        0x5a,
        0xb4,
        0x75,
        0xea,
        0xc9,
        0x8f,
        0x03,
        0x06,
        0x0c,
        0x18,
        0x30,
        0x60,
        0xc0,
        0x9d,
        0x27,
        0x4e,
        0x9c,
        0x25,
        0x4a,
        0x94,
        0x35,
        0x6a,
        0xd4,
        0xb5,
        0x77,
        0xee,
        0xc1,
        0x9f,
        0x23,
        0x46,
        0x8c,
        0x05,
        0x0a,
        0x14,
        0x28,
        0x50,
        0xa0,
        0x5d,
        0xba,
        0x69,
        0xd2,
        0xb9,
        0x6f,
        0xde,
        0xa1,
        0x5f,
        0xbe,
        0x61,
        0xc2,
        0x99,
        0x2f,
        0x5e,
        0xbc,
        0x65,
        0xca,
        0x89,
        0x0f,
        0x1e,
        0x3c,
        0x78,
        0xf0,
        0xfd,
        0xe7,
        0xd3,
        0xbb,
        0x6b,
        0xd6,
        0xb1,
        0x7f,
        0xfe,
        0xe1,
        0xdf,
        0xa3,
        0x5b,
        0xb6,
        0x71,
        0xe2,
        0xd9,
        0xaf,
        0x43,
        0x86,
        0x11,
        0x22,
        0x44,
        0x88,
        0x0d,
        0x1a,
        0x34,
        0x68,
        0xd0,
        0xbd,
        0x67,
        0xce,
        0x81,
        0x1f,
        0x3e,
        0x7c,
        0xf8,
        0xed,
        0xc7,
        0x93,
        0x3b,
        0x76,
        0xec,
        0xc5,
        0x97,
        0x33,
        0x66,
        0xcc,
        0x85,
        0x17,
        0x2e,
        0x5c,
        0xb8,
        0x6d,
        0xda,
        0xa9,
        0x4f,
        0x9e,
        0x21,
        0x42,
        0x84,
        0x15,
        0x2a,
        0x54,
        0xa8,
        0x4d,
        0x9a,
        0x29,
        0x52,
        0xa4,
        0x55,
        0xaa,
        0x49,
        0x92,
        0x39,
        0x72,
        0xe4,
        0xd5,
        0xb7,
        0x73,
        0xe6,
        0xd1,
        0xbf,
        0x63,
        0xc6,
        0x91,
        0x3f,
        0x7e,
        0xfc,
        0xe5,
        0xd7,
        0xb3,
        0x7b,
        0xf6,
        0xf1,
        0xff,
        0xe3,
        0xdb,
        0xab,
        0x4b,
        0x96,
        0x31,
        0x62,
        0xc4,
        0x95,
        0x37,
        0x6e,
        0xdc,
        0xa5,
        0x57,
        0xae,
        0x41,
        0x82,
        0x19,
        0x32,
        0x64,
        0xc8,
        0x8d,
        0x07,
        0x0e,
        0x1c,
        0x38,
        0x70,
        0xe0,
        0xdd,
        0xa7,
        0x53,
        0xa6,
        0x51,
        0xa2,
        0x59,
        0xb2,
        0x79,
        0xf2,
        0xf9,
        0xef,
        0xc3,
        0x9b,
        0x2b,
        0x56,
        0xac,
        0x45,
        0x8a,
        0x09,
        0x12,
        0x24,
        0x48,
        0x90,
        0x3d,
        0x7a,
        0xf4,
        0xf5,
        0xf7,
        0xf3,
        0xfb,
        0xeb,
        0xcb,
        0x8b,
        0x0b,
        0x16,
        0x2c,
        0x58,
        0xb0,
        0x7d,
        0xfa,
        0xe9,
        0xcf,
        0x83,
        0x1b,
        0x36,
        0x6c,
        0xd8,
        0xad,
        0x47,
        0x8e,
        0x00,
    };
    static constexpr uint8_t gf256log[256]{
        0xff,
        0x00,
        0x01,
        0x19,
        0x02,
        0x32,
        0x1a,
        0xc6,
        0x03,
        0xdf,
        0x33,
        0xee,
        0x1b,
        0x68,
        0xc7,
        0x4b,
        0x04,
        0x64,
        0xe0,
        0x0e,
        0x34,
        0x8d,
        0xef,
        0x81,
        0x1c,
        0xc1,
        0x69,
        0xf8,
        0xc8,
        0x08,
        0x4c,
        0x71,
        0x05,
        0x8a,
        0x65,
        0x2f,
        0xe1,
        0x24,
        0x0f,
        0x21,
        0x35,
        0x93,
        0x8e,
        0xda,
        0xf0,
        0x12,
        0x82,
        0x45,
        0x1d,
        0xb5,
        0xc2,
        0x7d,
        0x6a,
        0x27,
        0xf9,
        0xb9,
        0xc9,
        0x9a,
        0x09,
        0x78,
        0x4d,
        0xe4,
        0x72,
        0xa6,
        0x06,
        0xbf,
        0x8b,
        0x62,
        0x66,
        0xdd,
        0x30,
        0xfd,
        0xe2,
        0x98,
        0x25,
        0xb3,
        0x10,
        0x91,
        0x22,
        0x88,
        0x36,
        0xd0,
        0x94,
        0xce,
        0x8f,
        0x96,
        0xdb,
        0xbd,
        0xf1,
        0xd2,
        0x13,
        0x5c,
        0x83,
        0x38,
        0x46,
        0x40,
        0x1e,
        0x42,
        0xb6,
        0xa3,
        0xc3,
        0x48,
        0x7e,
        0x6e,
        0x6b,
        0x3a,
        0x28,
        0x54,
        0xfa,
        0x85,
        0xba,
        0x3d,
        0xca,
        0x5e,
        0x9b,
        0x9f,
        0x0a,
        0x15,
        0x79,
        0x2b,
        0x4e,
        0xd4,
        0xe5,
        0xac,
        0x73,
        0xf3,
        0xa7,
        0x57,
        0x07,
        0x70,
        0xc0,
        0xf7,
        0x8c,
        0x80,
        0x63,
        0x0d,
        0x67,
        0x4a,
        0xde,
        0xed,
        0x31,
        0xc5,
        0xfe,
        0x18,
        0xe3,
        0xa5,
        0x99,
        0x77,
        0x26,
        0xb8,
        0xb4,
        0x7c,
        0x11,
        0x44,
        0x92,
        0xd9,
        0x23,
        0x20,
        0x89,
        0x2e,
        0x37,
        0x3f,
        0xd1,
        0x5b,
        0x95,
        0xbc,
        0xcf,
        0xcd,
        0x90,
        0x87,
        0x97,
        0xb2,
        0xdc,
        0xfc,
        0xbe,
        0x61,
        0xf2,
        0x56,
        0xd3,
        0xab,
        0x14,
        0x2a,
        0x5d,
        0x9e,
        0x84,
        0x3c,
        0x39,
        0x53,
        0x47,
        0x6d,
        0x41,
        0xa2,
        0x1f,
        0x2d,
        0x43,
        0xd8,
        0xb7,
        0x7b,
        0xa4,
        0x76,
        0xc4,
        0x17,
        0x49,
        0xec,
        0x7f,
        0x0c,
        0x6f,
        0xf6,
        0x6c,
        0xa1,
        0x3b,
        0x52,
        0x29,
        0x9d,
        0x55,
        0xaa,
        0xfb,
        0x60,
        0x86,
        0xb1,
        0xbb,
        0xcc,
        0x3e,
        0x5a,
        0xcb,
        0x59,
        0x5f,
        0xb0,
        0x9c,
        0xa9,
        0xa0,
        0x51,
        0x0b,
        0xf5,
        0x16,
        0xeb,
        0x7a,
        0x75,
        0x2c,
        0xd7,
        0x4f,
        0xae,
        0xd5,
        0xe9,
        0xe6,
        0xe7,
        0xad,
        0xe8,
        0x74,
        0xd6,
        0xf4,
        0xea,
        0xa8,
        0x50,
        0x58,
        0xaf,
    };
    static constexpr uint8_t gf256inv[256]{
        0x01,
        0x8E,
        0xF4,
        0x47,
        0xA7,
        0x7A,
        0xBA,
        0xAD,
        0x9D,
        0xDD,
        0x98,
        0x3D,
        0xAA,
        0x5D,
        0x96,
        0xD8,
        0x72,
        0xC0,
        0x58,
        0xE0,
        0x3E,
        0x4C,
        0x66,
        0x90,
        0xDE,
        0x55,
        0x80,
        0xA0,
        0x83,
        0x4B,
        0x2A,
        0x6C,
        0xED,
        0x39,
        0x51,
        0x60,
        0x56,
        0x2C,
        0x8A,
        0x70,
        0xD0,
        0x1F,
        0x4A,
        0x26,
        0x8B,
        0x33,
        0x6E,
        0x48,
        0x89,
        0x6F,
        0x2E,
        0xA4,
        0xC3,
        0x40,
        0x5E,
        0x50,
        0x22,
        0xCF,
        0xA9,
        0xAB,
        0x0C,
        0x15,
        0xE1,
        0x36,
        0x5F,
        0xF8,
        0xD5,
        0x92,
        0x4E,
        0xA6,
        0x04,
        0x30,
        0x88,
        0x2B,
        0x1E,
        0x16,
        0x67,
        0x45,
        0x93,
        0x38,
        0x23,
        0x68,
        0x8C,
        0x81,
        0x1A,
        0x25,
        0x61,
        0x13,
        0xC1,
        0xCB,
        0x63,
        0x97,
        0x0E,
        0x37,
        0x41,
        0x24,
        0x57,
        0xCA,
        0x5B,
        0xB9,
        0xC4,
        0x17,
        0x4D,
        0x52,
        0x8D,
        0xEF,
        0xB3,
        0x20,
        0xEC,
        0x2F,
        0x32,
        0x28,
        0xD1,
        0x11,
        0xD9,
        0xE9,
        0xFB,
        0xDA,
        0x79,
        0xDB,
        0x77,
        0x06,
        0xBB,
        0x84,
        0xCD,
        0xFE,
        0xFC,
        0x1B,
        0x54,
        0xA1,
        0x1D,
        0x7C,
        0xCC,
        0xE4,
        0xB0,
        0x49,
        0x31,
        0x27,
        0x2D,
        0x53,
        0x69,
        0x02,
        0xF5,
        0x18,
        0xDF,
        0x44,
        0x4F,
        0x9B,
        0xBC,
        0x0F,
        0x5C,
        0x0B,
        0xDC,
        0xBD,
        0x94,
        0xAC,
        0x09,
        0xC7,
        0xA2,
        0x1C,
        0x82,
        0x9F,
        0xC6,
        0x34,
        0xC2,
        0x46,
        0x05,
        0xCE,
        0x3B,
        0x0D,
        0x3C,
        0x9C,
        0x08,
        0xBE,
        0xB7,
        0x87,
        0xE5,
        0xEE,
        0x6B,
        0xEB,
        0xF2,
        0xBF,
        0xAF,
        0xC5,
        0x64,
        0x07,
        0x7B,
        0x95,
        0x9A,
        0xAE,
        0xB6,
        0x12,
        0x59,
        0xA5,
        0x35,
        0x65,
        0xB8,
        0xA3,
        0x9E,
        0xD2,
        0xF7,
        0x62,
        0x5A,
        0x85,
        0x7D,
        0xA8,
        0x3A,
        0x29,
        0x71,
        0xC8,
        0xF6,
        0xF9,
        0x43,
        0xD7,
        0xD6,
        0x10,
        0x73,
        0x76,
        0x78,
        0x99,
        0x0A,
        0x19,
        0x91,
        0x14,
        0x3F,
        0xE6,
        0xF0,
        0x86,
        0xB1,
        0xE2,
        0xF1,
        0xFA,
        0x74,
        0xF3,
        0xB4,
        0x6D,
        0x21,
        0xB2,
        0x6A,
        0xE3,
        0xE7,
        0xB5,
        0xEA,
        0x03,
        0x8F,
        0xD3,
        0xC9,
        0x42,
        0xD4,
        0xE8,
        0x75,
        0x7F,
        0x00,
        0x7E, 0x00, 0x00};

    static uint8_t e(uint8_t a) { return gf256exp[a]; };
    static uint8_t log(uint8_t a) { return gf256log[a]; };
    static uint8_t add(uint8_t a, uint8_t b) { return a ^ b; };
    static uint8_t subtract(uint8_t a, uint8_t b) { return a ^ b; };
    static uint8_t mul1(uint8_t a, uint8_t b) {
        if (a == 0 || b == 0) return 0;
        return gf256exp[(gf256log[a] + gf256log[b]) % 255];
    };
    static uint8_t mul2(uint8_t a, uint8_t b) {
        uint8_t accumulator{0};
        while (a != 0 && b != 0) {
            if (b & 0b0000'0001) {                    // if the polynomial for b has a constant term, add the corresponding a to accumulator
                accumulator = accumulator ^ a;        // addition in GF(2^m) is an XOR of the polynomial coefficients
            }

            if (a & 0b1000'0000) {                                         // GF modulo: if a has a nonzero term x^7, then must be reduced when it becomes x^8
                a = static_cast<uint8_t>((a << 1) ^ 0b1'0001'1101);        // subtract (= XOR) the primitive polynomial x^8 + x^4 + x^3 + x^2 + 1 (0b1_0001_1101) – must be irreducible
            } else {
                a = static_cast<uint8_t>(a << 1U);        // equivalent to a*x
            }
            b = b >> 1U;
        }
        return accumulator;
    }

    static uint8_t mul3(uint8_t x, uint8_t y) {
        uint16_t z = 0;
        for (int8_t i = 7; i >= 0; i--) {
            z = (z << 1) ^ ((z >> 7) * 0x11D);
            z ^= ((y >> i) & 1) * x;
        }
        return z;
    }

    static uint8_t inv(uint8_t a) {
        return gf256exp[(gf256log[a] * 254) % 255];
    };
};

// static uint8_t div(uint8_t a, uint8_t b) {
//     if (a == 0) return 0;
//     if (b == 0) return 0xFF;
//     return gf256exp[(gf256log[a] + 255 - gf256log[b]) % 255];
// };

// void initrspoly(unsigned char eclen, unsigned char *genpoly) {
//     unsigned char i, j;

// #ifdef RTGENEXPLOG
//     gentables();
// #endif

//     genpoly[0] = 1;
//     for (i = 0; i < eclen; i++) {
//         genpoly[i + 1] = 1;
//         for (j = i; j > 0; j--)
//             genpoly[j] = genpoly[j]
//                              ? genpoly[j - 1] ^ gexp(modnn(glog(genpoly[j]) + i))
//                              : genpoly[j - 1];
//         genpoly[0] = gexp(modnn(glog(genpoly[0]) + i));
//     }
//     for (i = 0; i <= eclen; i++)
//         genpoly[i] = glog(genpoly[i]);        // use logs for genpoly[]
// }

// void appendrs(unsigned char *data, unsigned char dlen,
//               unsigned char *ecbuf, unsigned char eclen, unsigned char *genpoly) {
//     unsigned char i, j, fb;

//     memset(ecbuf, 0, eclen);
//     for (i = 0; i < dlen; i++) {
//         fb = glog(data[i] ^ ecbuf[0]);
//         if (fb != 255) /* fb term is non-zero */
//             for (j = 1; j < eclen; j++)
//                 ecbuf[j - 1] = ecbuf[j] ^ gexp(modnn(fb + genpoly[eclen - j]));
//         else
//             memmove(ecbuf, ecbuf + 1, eclen - 1);
//         ecbuf[eclen - 1] = fb == 255 ? 0 : gexp(modnn(fb + genpoly[0]));
//     }
// }