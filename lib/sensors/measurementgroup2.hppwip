// ######################################################################################
// ### Author : Pascal Roobrouck - https://github.com/Strooom                         ###
// ### License : CC 4.0 BY-NC-SA - https://creativecommons.org/licenses/by-nc-sa/4.0/ ###
// ######################################################################################

#pragma once
#include <stdint.h>
#include <ctime>
#include <sensorchannel.hpp>
#include <float.hpp>
#include <realtimeclock.hpp>
#include <stdio.h>
#include <cstring>

template <uint32_t maxNmbrOfMeasurements>
class measurementGroup2 {
  public:
    void reset() { nmbrOfMeasurements = 0; };
    uint32_t getNumberOfMeasurements() const { return nmbrOfMeasurements; };
    time_t getTimeStamp() const { return timestamp; };
    uint32_t getDeviceIndex(uint32_t measurementIndex) const { return measurements[measurementIndex].deviceIndex; };
    uint32_t getChannelIndex(uint32_t measurementIndex) const { return measurements[measurementIndex].channelIndex; };
    float getValue(uint32_t measurementIndex) const { return measurements[measurementIndex].value; };

    void snprint(char* tmpString, const uint32_t maxLength) const { snprintf(tmpString, maxLength, "%u measurements from %s", nmbrOfMeasurements, ctime(&timestamp)); };
    void setTimestamp(const time_t newTimestamp) { timestamp = newTimestamp; };
    void addMeasurement(uint32_t deviceIndex, uint32_t channelIndex, float value) {
        if (nmbrOfMeasurements < maxNmbrOfMeasurements) {
            measurements[nmbrOfMeasurements].deviceIndex  = static_cast<uint8_t>(deviceIndex);
            measurements[nmbrOfMeasurements].channelIndex = static_cast<uint8_t>(channelIndex);
            measurements[nmbrOfMeasurements].value        = value;
            nmbrOfMeasurements++;
        }
    };
    void fromBytes(const uint8_t* source) {
        uint8_t tmpNmbrOfMeasurements = source[0];
        if (tmpNmbrOfMeasurements > maxNmbrOfMeasurements) {
            return;
        }

        uint32_t tmpLengthInBytes = lengthInBytes(tmpNmbrOfMeasurements);
        uint8_t tmpCheckSum{0};
        for (uint32_t index = 0; index < tmpLengthInBytes; index++) {
            tmpCheckSum = tmpCheckSum ^ source[index];
        }
        if (tmpCheckSum != 0x00) {
            return;
        }

        nmbrOfMeasurements              = tmpNmbrOfMeasurements;
        const uint8_t* timestampAsBytes = source + 1;
        timestamp                       = realTimeClock::time_tFromBytes(timestampAsBytes);
        for (uint32_t measurementIndex = 0; measurementIndex < nmbrOfMeasurements; measurementIndex++) {
            measurements[measurementIndex].deviceIndex  = sensorChannel::extractDeviceIndex(source[5 + (measurementIndex * 5)]);
            measurements[measurementIndex].channelIndex = sensorChannel::extractChannelIndex(source[5 + (measurementIndex * 5)]);
            measurements[measurementIndex].value        = bytesToFloat(source + 6 + (measurementIndex * 5));
        }
    };
    void toBytes(uint8_t* buffer, const uint32_t bufferSize) const {
        if (bufferSize < lengthInBytes(nmbrOfMeasurements)) {
            return;
        }

        buffer[0]                       = nmbrOfMeasurements;
        const uint8_t* timestampAsBytes = realTimeClock::bytesFromTime_t(timestamp);
        memcpy(buffer + 1, timestampAsBytes, 4);
        for (uint32_t measurementIndex = 0; measurementIndex < nmbrOfMeasurements; measurementIndex++) {
            buffer[5 + (measurementIndex * 5)] = sensorChannel::compressDeviceAndChannelIndex(measurements[measurementIndex].deviceIndex, measurements[measurementIndex].channelIndex);
            const uint8_t* valueAsBytes        = floatToBytes(measurements[measurementIndex].value);
            memcpy(buffer + 6 + (measurementIndex * 5), valueAsBytes, 4);
        }
        buffer[5 + (nmbrOfMeasurements * 5)] = calculateChecksum(buffer, lengthInBytes(nmbrOfMeasurements) - 1);
    };
    static uint32_t lengthInBytes(const uint32_t someNmbrOfMeasurements) {
        return ((someNmbrOfMeasurements * 5U) + 6U);        // 1 byte for nmbrOfMeasurements, 4 bytes for timestamp, 1 byte for checksum + 5 bytes per measurement : 1 byte DeviceChannelIndex + 4 byte float value
    };
    static uint8_t calculateChecksum(const uint8_t* buffer, const uint32_t bufferSize) {
        uint8_t result{0};
        for (uint32_t index = 0; index < bufferSize; index++) {
            result = result ^ buffer[index];
        }
        return result;
    };
    static constexpr uint32_t oldestPossibleTimestamp{1577836800};        // Jan 01 2020 00:00:00 GMT+0000 // 0x5E0BE100
    static constexpr uint8_t defaultChecksum{0xB4};                       // checksum for 0x5E0BE100 oldestPossibleTimestamp

#ifndef unitTesting

  private:
#endif

    uint8_t nmbrOfMeasurements{0};
    time_t timestamp{oldestPossibleTimestamp};
    struct {
        uint8_t deviceIndex;
        uint8_t channelIndex;
        float value;
    } measurements[maxNmbrOfMeasurements];
};
