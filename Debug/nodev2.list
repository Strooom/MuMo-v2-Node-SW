
nodev2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cac  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08004dec  08004dec  00014dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f28  08004f28  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004f28  08004f28  00014f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f30  08004f30  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f30  08004f30  00014f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f34  08004f34  00014f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004f38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000070  08004fa8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08004fa8  00020280  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017b94  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e1e  00000000  00000000  00037c2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001878  00000000  00000000  0003aa50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001760  00000000  00000000  0003c2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c955  00000000  00000000  0003da28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018b97  00000000  00000000  0005a37d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b3541  00000000  00000000  00072f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00126455  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cd8  00000000  00000000  001264a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000070 	.word	0x20000070
 800015c:	00000000 	.word	0x00000000
 8000160:	08004dd4 	.word	0x08004dd4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000074 	.word	0x20000074
 800017c:	08004dd4 	.word	0x08004dd4

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14d      	bne.n	80002fc <__udivmoddi4+0xac>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d968      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b152      	cbz	r2, 8000282 <__udivmoddi4+0x32>
 800026c:	fa01 f302 	lsl.w	r3, r1, r2
 8000270:	f1c2 0120 	rsb	r1, r2, #32
 8000274:	fa20 f101 	lsr.w	r1, r0, r1
 8000278:	fa0c fc02 	lsl.w	ip, ip, r2
 800027c:	ea41 0803 	orr.w	r8, r1, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000286:	0c21      	lsrs	r1, r4, #16
 8000288:	fbb8 fef5 	udiv	lr, r8, r5
 800028c:	fa1f f78c 	uxth.w	r7, ip
 8000290:	fb05 831e 	mls	r3, r5, lr, r8
 8000294:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000298:	fb0e f107 	mul.w	r1, lr, r7
 800029c:	4299      	cmp	r1, r3
 800029e:	d90b      	bls.n	80002b8 <__udivmoddi4+0x68>
 80002a0:	eb1c 0303 	adds.w	r3, ip, r3
 80002a4:	f10e 30ff 	add.w	r0, lr, #4294967295
 80002a8:	f080 811e 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002ac:	4299      	cmp	r1, r3
 80002ae:	f240 811b 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b2:	f1ae 0e02 	sub.w	lr, lr, #2
 80002b6:	4463      	add	r3, ip
 80002b8:	1a5b      	subs	r3, r3, r1
 80002ba:	b2a4      	uxth	r4, r4
 80002bc:	fbb3 f0f5 	udiv	r0, r3, r5
 80002c0:	fb05 3310 	mls	r3, r5, r0, r3
 80002c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c8:	fb00 f707 	mul.w	r7, r0, r7
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	d90a      	bls.n	80002e6 <__udivmoddi4+0x96>
 80002d0:	eb1c 0404 	adds.w	r4, ip, r4
 80002d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d8:	f080 8108 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002dc:	42a7      	cmp	r7, r4
 80002de:	f240 8105 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002e2:	4464      	add	r4, ip
 80002e4:	3802      	subs	r0, #2
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002ec:	2100      	movs	r1, #0
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa8>
 80002f0:	40d4      	lsrs	r4, r2
 80002f2:	2300      	movs	r3, #0
 80002f4:	e9c6 4300 	strd	r4, r3, [r6]
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0xc2>
 8000300:	2e00      	cmp	r6, #0
 8000302:	f000 80ee 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000306:	2100      	movs	r1, #0
 8000308:	e9c6 0500 	strd	r0, r5, [r6]
 800030c:	4608      	mov	r0, r1
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f183 	clz	r1, r3
 8000316:	2900      	cmp	r1, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	42ab      	cmp	r3, r5
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb65 0303 	sbc.w	r3, r5, r3
 800032a:	2001      	movs	r0, #1
 800032c:	4698      	mov	r8, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e2      	beq.n	80002f8 <__udivmoddi4+0xa8>
 8000332:	e9c6 4800 	strd	r4, r8, [r6]
 8000336:	e7df      	b.n	80002f8 <__udivmoddi4+0xa8>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8091 	bne.w	8000468 <__udivmoddi4+0x218>
 8000346:	eba1 050c 	sub.w	r5, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2101      	movs	r1, #1
 8000354:	fbb5 f3f7 	udiv	r3, r5, r7
 8000358:	fb07 5013 	mls	r0, r7, r3, r5
 800035c:	0c25      	lsrs	r5, r4, #16
 800035e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	42a8      	cmp	r0, r5
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0505 	adds.w	r5, ip, r5
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	42a8      	cmp	r0, r5
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a2d      	subs	r5, r5, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb5 f0f7 	udiv	r0, r5, r7
 8000384:	fb07 5510 	mls	r5, r7, r0, r5
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 35ff 	add.w	r5, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4628      	mov	r0, r5
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79e      	b.n	80002ee <__udivmoddi4+0x9e>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa05 f301 	lsl.w	r3, r5, r1
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40fd      	lsrs	r5, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f301 	lsl.w	r3, r0, r1
 80003d2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 5518 	mls	r5, r9, r8, r5
 80003e0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	42a8      	cmp	r0, r5
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0505 	adds.w	r5, ip, r5
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	42a8      	cmp	r0, r5
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4465      	add	r5, ip
 8000408:	1a2d      	subs	r5, r5, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000410:	fb09 5510 	mls	r5, r9, r0, r5
 8000414:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	45ae      	cmp	lr, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	45ae      	cmp	lr, r5
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba5 050e 	sub.w	r5, r5, lr
 800043e:	42a5      	cmp	r5, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15e      	cbz	r6, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb65 050e 	sbc.w	r5, r5, lr
 8000452:	fa05 f707 	lsl.w	r7, r5, r7
 8000456:	fa22 f301 	lsr.w	r3, r2, r1
 800045a:	40cd      	lsrs	r5, r1
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c6 7500 	strd	r7, r5, [r6]
 8000462:	2100      	movs	r1, #0
 8000464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000468:	f1c2 0320 	rsb	r3, r2, #32
 800046c:	fa20 f103 	lsr.w	r1, r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa25 f303 	lsr.w	r3, r5, r3
 8000478:	4095      	lsls	r5, r2
 800047a:	430d      	orrs	r5, r1
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3011 	mls	r0, r7, r1, r3
 800048c:	0c2b      	lsrs	r3, r5, #16
 800048e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000492:	fb01 f00e 	mul.w	r0, r1, lr
 8000496:	4298      	cmp	r0, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f101 38ff 	add.w	r8, r1, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	4298      	cmp	r0, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3902      	subs	r1, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1a1b      	subs	r3, r3, r0
 80004b2:	b2ad      	uxth	r5, r5
 80004b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b8:	fb07 3310 	mls	r3, r7, r0, r3
 80004bc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004c0:	fb00 f30e 	mul.w	r3, r0, lr
 80004c4:	42ab      	cmp	r3, r5
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0505 	adds.w	r5, ip, r5
 80004cc:	f100 38ff 	add.w	r8, r0, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	42ab      	cmp	r3, r5
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4465      	add	r5, ip
 80004da:	1aed      	subs	r5, r5, r3
 80004dc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	4631      	mov	r1, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e707      	b.n	80002f8 <__udivmoddi4+0xa8>
 80004e8:	4686      	mov	lr, r0
 80004ea:	e6e5      	b.n	80002b8 <__udivmoddi4+0x68>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6fa      	b.n	80002e6 <__udivmoddi4+0x96>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4640      	mov	r0, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4641      	mov	r1, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4465      	add	r5, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4608      	mov	r0, r1
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800052c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000530:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000532:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4313      	orrs	r3, r2
 800053a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800053c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000540:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4013      	ands	r3, r2
 8000546:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000548:	68fb      	ldr	r3, [r7, #12]
}
 800054a:	bf00      	nop
 800054c:	3714      	adds	r7, #20
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b5b0      	push	{r4, r5, r7, lr}
 8000556:	b08a      	sub	sp, #40	; 0x28
 8000558:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f000 fc89 	bl	8000e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f86d 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 fa17 	bl	8000994 <MX_GPIO_Init>
  MX_ADC_Init();
 8000566:	f000 f8c5 	bl	80006f4 <MX_ADC_Init>
  MX_RTC_Init();
 800056a:	f000 f94f 	bl	800080c <MX_RTC_Init>
  MX_SPI2_Init();
 800056e:	f000 f987 	bl	8000880 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000572:	f000 f9c3 	bl	80008fc <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8000576:	f000 f90b 	bl	8000790 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  uint8_t StartMSG[] = "Start I2C Scan:\r\n";
 800057a:	4b2b      	ldr	r3, [pc, #172]	; (8000628 <main+0xd4>)
 800057c:	f107 0414 	add.w	r4, r7, #20
 8000580:	461d      	mov	r5, r3
 8000582:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000584:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000586:	682b      	ldr	r3, [r5, #0]
 8000588:	8023      	strh	r3, [r4, #0]
  uint8_t EndMSG[] = "Ready\r\n";
 800058a:	4a28      	ldr	r2, [pc, #160]	; (800062c <main+0xd8>)
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000594:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t Buffer[10];
  HAL_GPIO_WritePin(EN3V3_GPIO_Port, EN3V3_Pin, 1U); // Enabling 3.3V on the board...
 8000598:	2201      	movs	r2, #1
 800059a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800059e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a2:	f001 f975 	bl	8001890 <HAL_GPIO_WritePin>

  HAL_Delay(1000);
 80005a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005aa:	f000 fcd7 	bl	8000f5c <HAL_Delay>
	  HAL_GPIO_WritePin(SCL_GPIO_Port, SCL_Pin, 1U);
	  HAL_Delay(10U);
	  HAL_GPIO_WritePin(SCL_GPIO_Port, SCL_Pin, 0U);
*/

	  HAL_UART_Transmit(&huart1, StartMSG, 17, 10000);
 80005ae:	f107 0114 	add.w	r1, r7, #20
 80005b2:	f242 7310 	movw	r3, #10000	; 0x2710
 80005b6:	2211      	movs	r2, #17
 80005b8:	481d      	ldr	r0, [pc, #116]	; (8000630 <main+0xdc>)
 80005ba:	f003 f9ae 	bl	800391a <HAL_UART_Transmit>

	  for(uint8_t i=1; i<128; i++)
 80005be:	2301      	movs	r3, #1
 80005c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80005c4:	e01f      	b.n	8000606 <main+0xb2>
	      {
		  if (HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i<<1), 3, 5) == HAL_OK) {
 80005c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	005b      	lsls	r3, r3, #1
 80005ce:	b299      	uxth	r1, r3
 80005d0:	2305      	movs	r3, #5
 80005d2:	2203      	movs	r2, #3
 80005d4:	4817      	ldr	r0, [pc, #92]	; (8000634 <main+0xe0>)
 80005d6:	f001 fa01 	bl	80019dc <HAL_I2C_IsDeviceReady>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d10d      	bne.n	80005fc <main+0xa8>

			  sprintf(Buffer, "0x%2X, ", i);
 80005e0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80005e4:	463b      	mov	r3, r7
 80005e6:	4914      	ldr	r1, [pc, #80]	; (8000638 <main+0xe4>)
 80005e8:	4618      	mov	r0, r3
 80005ea:	f003 ff87 	bl	80044fc <siprintf>
			              HAL_UART_Transmit(&huart1, Buffer, 5, 10000);
 80005ee:	4639      	mov	r1, r7
 80005f0:	f242 7310 	movw	r3, #10000	; 0x2710
 80005f4:	2205      	movs	r2, #5
 80005f6:	480e      	ldr	r0, [pc, #56]	; (8000630 <main+0xdc>)
 80005f8:	f003 f98f 	bl	800391a <HAL_UART_Transmit>
	  for(uint8_t i=1; i<128; i++)
 80005fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000600:	3301      	adds	r3, #1
 8000602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000606:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800060a:	2b00      	cmp	r3, #0
 800060c:	dadb      	bge.n	80005c6 <main+0x72>
		  	  } else {

		  	  }
		  	  //if (i > 0 && (i + 1) % 16 == 0) printf("\n");
	      }
	      HAL_UART_Transmit(&huart1, EndMSG, 6, 10000);
 800060e:	f107 010c 	add.w	r1, r7, #12
 8000612:	f242 7310 	movw	r3, #10000	; 0x2710
 8000616:	2206      	movs	r2, #6
 8000618:	4805      	ldr	r0, [pc, #20]	; (8000630 <main+0xdc>)
 800061a:	f003 f97e 	bl	800391a <HAL_UART_Transmit>

	  HAL_Delay(1000U);
 800061e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000622:	f000 fc9b 	bl	8000f5c <HAL_Delay>
	  HAL_UART_Transmit(&huart1, StartMSG, 17, 10000);
 8000626:	e7c2      	b.n	80005ae <main+0x5a>
 8000628:	08004df4 	.word	0x08004df4
 800062c:	08004e08 	.word	0x08004e08
 8000630:	200001d8 	.word	0x200001d8
 8000634:	200000f0 	.word	0x200000f0
 8000638:	08004dec 	.word	0x08004dec

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b09a      	sub	sp, #104	; 0x68
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	2248      	movs	r2, #72	; 0x48
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f003 ff4e 	bl	80044ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
 8000660:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000662:	4b23      	ldr	r3, [pc, #140]	; (80006f0 <SystemClock_Config+0xb4>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800066a:	4a21      	ldr	r2, [pc, #132]	; (80006f0 <SystemClock_Config+0xb4>)
 800066c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000670:	6013      	str	r3, [r2, #0]
 8000672:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <SystemClock_Config+0xb4>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800067e:	232a      	movs	r3, #42	; 0x2a
 8000680:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000682:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000686:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068c:	2340      	movs	r3, #64	; 0x40
 800068e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000690:	2300      	movs	r3, #0
 8000692:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000694:	2360      	movs	r3, #96	; 0x60
 8000696:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800069c:	2301      	movs	r3, #1
 800069e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006a0:	2300      	movs	r3, #0
 80006a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a4:	f107 0320 	add.w	r3, r7, #32
 80006a8:	4618      	mov	r0, r3
 80006aa:	f001 fe1d 	bl	80022e8 <HAL_RCC_OscConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80006b4:	f000 f9ac 	bl	8000a10 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80006b8:	234f      	movs	r3, #79	; 0x4f
 80006ba:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006bc:	2300      	movs	r3, #0
 80006be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f002 f9a2 	bl	8002a20 <HAL_RCC_ClockConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006e2:	f000 f995 	bl	8000a10 <Error_Handler>
  }
}
 80006e6:	bf00      	nop
 80006e8:	3768      	adds	r7, #104	; 0x68
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	58000400 	.word	0x58000400

080006f4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80006f8:	4b23      	ldr	r3, [pc, #140]	; (8000788 <MX_ADC_Init+0x94>)
 80006fa:	4a24      	ldr	r2, [pc, #144]	; (800078c <MX_ADC_Init+0x98>)
 80006fc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80006fe:	4b22      	ldr	r3, [pc, #136]	; (8000788 <MX_ADC_Init+0x94>)
 8000700:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8000704:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <MX_ADC_Init+0x94>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <MX_ADC_Init+0x94>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <MX_ADC_Init+0x94>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <MX_ADC_Init+0x94>)
 800071a:	2204      	movs	r2, #4
 800071c:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <MX_ADC_Init+0x94>)
 8000720:	2200      	movs	r2, #0
 8000722:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <MX_ADC_Init+0x94>)
 8000726:	2200      	movs	r2, #0
 8000728:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <MX_ADC_Init+0x94>)
 800072c:	2200      	movs	r2, #0
 800072e:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <MX_ADC_Init+0x94>)
 8000732:	2201      	movs	r2, #1
 8000734:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <MX_ADC_Init+0x94>)
 8000738:	2200      	movs	r2, #0
 800073a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <MX_ADC_Init+0x94>)
 8000740:	2200      	movs	r2, #0
 8000742:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000744:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_ADC_Init+0x94>)
 8000746:	2200      	movs	r2, #0
 8000748:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <MX_ADC_Init+0x94>)
 800074c:	2200      	movs	r2, #0
 800074e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000752:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <MX_ADC_Init+0x94>)
 8000754:	2200      	movs	r2, #0
 8000756:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000758:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MX_ADC_Init+0x94>)
 800075a:	2200      	movs	r2, #0
 800075c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800075e:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <MX_ADC_Init+0x94>)
 8000760:	2200      	movs	r2, #0
 8000762:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <MX_ADC_Init+0x94>)
 8000766:	2200      	movs	r2, #0
 8000768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_ADC_Init+0x94>)
 800076e:	2200      	movs	r2, #0
 8000770:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_ADC_Init+0x94>)
 8000774:	f000 fc96 	bl	80010a4 <HAL_ADC_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_ADC_Init+0x8e>
  {
    Error_Handler();
 800077e:	f000 f947 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	2000008c 	.word	0x2000008c
 800078c:	40012400 	.word	0x40012400

08000790 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000794:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <MX_I2C2_Init+0x74>)
 8000796:	4a1c      	ldr	r2, [pc, #112]	; (8000808 <MX_I2C2_Init+0x78>)
 8000798:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 800079a:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <MX_I2C2_Init+0x74>)
 800079c:	f640 6214 	movw	r2, #3604	; 0xe14
 80007a0:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007a2:	4b18      	ldr	r3, [pc, #96]	; (8000804 <MX_I2C2_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a8:	4b16      	ldr	r3, [pc, #88]	; (8000804 <MX_I2C2_Init+0x74>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007ae:	4b15      	ldr	r3, [pc, #84]	; (8000804 <MX_I2C2_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007b4:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_I2C2_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007ba:	4b12      	ldr	r3, [pc, #72]	; (8000804 <MX_I2C2_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007c0:	4b10      	ldr	r3, [pc, #64]	; (8000804 <MX_I2C2_Init+0x74>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c6:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_I2C2_Init+0x74>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007cc:	480d      	ldr	r0, [pc, #52]	; (8000804 <MX_I2C2_Init+0x74>)
 80007ce:	f001 f876 	bl	80018be <HAL_I2C_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80007d8:	f000 f91a 	bl	8000a10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007dc:	2100      	movs	r1, #0
 80007de:	4809      	ldr	r0, [pc, #36]	; (8000804 <MX_I2C2_Init+0x74>)
 80007e0:	f001 fa43 	bl	8001c6a <HAL_I2CEx_ConfigAnalogFilter>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80007ea:	f000 f911 	bl	8000a10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007ee:	2100      	movs	r1, #0
 80007f0:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_I2C2_Init+0x74>)
 80007f2:	f001 fa84 	bl	8001cfe <HAL_I2CEx_ConfigDigitalFilter>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80007fc:	f000 f908 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	200000f0 	.word	0x200000f0
 8000808:	40005800 	.word	0x40005800

0800080c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000810:	4b19      	ldr	r3, [pc, #100]	; (8000878 <MX_RTC_Init+0x6c>)
 8000812:	4a1a      	ldr	r2, [pc, #104]	; (800087c <MX_RTC_Init+0x70>)
 8000814:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000816:	4b18      	ldr	r3, [pc, #96]	; (8000878 <MX_RTC_Init+0x6c>)
 8000818:	2200      	movs	r2, #0
 800081a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800081c:	4b16      	ldr	r3, [pc, #88]	; (8000878 <MX_RTC_Init+0x6c>)
 800081e:	227f      	movs	r2, #127	; 0x7f
 8000820:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000822:	4b15      	ldr	r3, [pc, #84]	; (8000878 <MX_RTC_Init+0x6c>)
 8000824:	22ff      	movs	r2, #255	; 0xff
 8000826:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000828:	4b13      	ldr	r3, [pc, #76]	; (8000878 <MX_RTC_Init+0x6c>)
 800082a:	2200      	movs	r2, #0
 800082c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800082e:	4b12      	ldr	r3, [pc, #72]	; (8000878 <MX_RTC_Init+0x6c>)
 8000830:	2200      	movs	r2, #0
 8000832:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000834:	4b10      	ldr	r3, [pc, #64]	; (8000878 <MX_RTC_Init+0x6c>)
 8000836:	2200      	movs	r2, #0
 8000838:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800083a:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_RTC_Init+0x6c>)
 800083c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000840:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000842:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <MX_RTC_Init+0x6c>)
 8000844:	2200      	movs	r2, #0
 8000846:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000848:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <MX_RTC_Init+0x6c>)
 800084a:	2200      	movs	r2, #0
 800084c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800084e:	480a      	ldr	r0, [pc, #40]	; (8000878 <MX_RTC_Init+0x6c>)
 8000850:	f002 fda2 	bl	8003398 <HAL_RTC_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800085a:	f000 f8d9 	bl	8000a10 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800085e:	2200      	movs	r2, #0
 8000860:	2100      	movs	r1, #0
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_RTC_Init+0x6c>)
 8000864:	f002 feaa 	bl	80035bc <HAL_RTCEx_SetWakeUpTimer>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800086e:	f000 f8cf 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	2000013c 	.word	0x2000013c
 800087c:	40002800 	.word	0x40002800

08000880 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000884:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <MX_SPI2_Init+0x74>)
 8000886:	4a1c      	ldr	r2, [pc, #112]	; (80008f8 <MX_SPI2_Init+0x78>)
 8000888:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800088a:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <MX_SPI2_Init+0x74>)
 800088c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000890:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000892:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <MX_SPI2_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000898:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <MX_SPI2_Init+0x74>)
 800089a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800089e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <MX_SPI2_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a6:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <MX_SPI2_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008ac:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_SPI2_Init+0x74>)
 80008ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_SPI2_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_SPI2_Init+0x74>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_SPI2_Init+0x74>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <MX_SPI2_Init+0x74>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_SPI2_Init+0x74>)
 80008ce:	2207      	movs	r2, #7
 80008d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <MX_SPI2_Init+0x74>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_SPI2_Init+0x74>)
 80008da:	2208      	movs	r2, #8
 80008dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_SPI2_Init+0x74>)
 80008e0:	f002 fed6 	bl	8003690 <HAL_SPI_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80008ea:	f000 f891 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000174 	.word	0x20000174
 80008f8:	40003800 	.word	0x40003800

080008fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000900:	4b22      	ldr	r3, [pc, #136]	; (800098c <MX_USART1_UART_Init+0x90>)
 8000902:	4a23      	ldr	r2, [pc, #140]	; (8000990 <MX_USART1_UART_Init+0x94>)
 8000904:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000906:	4b21      	ldr	r3, [pc, #132]	; (800098c <MX_USART1_UART_Init+0x90>)
 8000908:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800090c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800090e:	4b1f      	ldr	r3, [pc, #124]	; (800098c <MX_USART1_UART_Init+0x90>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000914:	4b1d      	ldr	r3, [pc, #116]	; (800098c <MX_USART1_UART_Init+0x90>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800091a:	4b1c      	ldr	r3, [pc, #112]	; (800098c <MX_USART1_UART_Init+0x90>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000920:	4b1a      	ldr	r3, [pc, #104]	; (800098c <MX_USART1_UART_Init+0x90>)
 8000922:	220c      	movs	r2, #12
 8000924:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000926:	4b19      	ldr	r3, [pc, #100]	; (800098c <MX_USART1_UART_Init+0x90>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800092c:	4b17      	ldr	r3, [pc, #92]	; (800098c <MX_USART1_UART_Init+0x90>)
 800092e:	2200      	movs	r2, #0
 8000930:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000932:	4b16      	ldr	r3, [pc, #88]	; (800098c <MX_USART1_UART_Init+0x90>)
 8000934:	2200      	movs	r2, #0
 8000936:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000938:	4b14      	ldr	r3, [pc, #80]	; (800098c <MX_USART1_UART_Init+0x90>)
 800093a:	2200      	movs	r2, #0
 800093c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800093e:	4b13      	ldr	r3, [pc, #76]	; (800098c <MX_USART1_UART_Init+0x90>)
 8000940:	2200      	movs	r2, #0
 8000942:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000944:	4811      	ldr	r0, [pc, #68]	; (800098c <MX_USART1_UART_Init+0x90>)
 8000946:	f002 ff98 	bl	800387a <HAL_UART_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000950:	f000 f85e 	bl	8000a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000954:	2100      	movs	r1, #0
 8000956:	480d      	ldr	r0, [pc, #52]	; (800098c <MX_USART1_UART_Init+0x90>)
 8000958:	f003 fcd6 	bl	8004308 <HAL_UARTEx_SetTxFifoThreshold>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000962:	f000 f855 	bl	8000a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000966:	2100      	movs	r1, #0
 8000968:	4808      	ldr	r0, [pc, #32]	; (800098c <MX_USART1_UART_Init+0x90>)
 800096a:	f003 fd0b 	bl	8004384 <HAL_UARTEx_SetRxFifoThreshold>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000974:	f000 f84c 	bl	8000a10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000978:	4804      	ldr	r0, [pc, #16]	; (800098c <MX_USART1_UART_Init+0x90>)
 800097a:	f003 fc8d 	bl	8004298 <HAL_UARTEx_DisableFifoMode>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000984:	f000 f844 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}
 800098c:	200001d8 	.word	0x200001d8
 8000990:	40013800 	.word	0x40013800

08000994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a8:	2001      	movs	r0, #1
 80009aa:	f7ff fdbb 	bl	8000524 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ae:	2002      	movs	r0, #2
 80009b0:	f7ff fdb8 	bl	8000524 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(chipSelect_GPIO_Port, chipSelect_Pin, GPIO_PIN_RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2120      	movs	r1, #32
 80009b8:	4814      	ldr	r0, [pc, #80]	; (8000a0c <MX_GPIO_Init+0x78>)
 80009ba:	f000 ff69 	bl	8001890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, writeProtect_Pin|EN3V3_Pin, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	f240 2101 	movw	r1, #513	; 0x201
 80009c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c8:	f000 ff62 	bl	8001890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : chipSelect_Pin */
  GPIO_InitStruct.Pin = chipSelect_Pin;
 80009cc:	2320      	movs	r3, #32
 80009ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(chipSelect_GPIO_Port, &GPIO_InitStruct);
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	4619      	mov	r1, r3
 80009e0:	480a      	ldr	r0, [pc, #40]	; (8000a0c <MX_GPIO_Init+0x78>)
 80009e2:	f000 fdf5 	bl	80015d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : writeProtect_Pin EN3V3_Pin */
  GPIO_InitStruct.Pin = writeProtect_Pin|EN3V3_Pin;
 80009e6:	f240 2301 	movw	r3, #513	; 0x201
 80009ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ec:	2301      	movs	r3, #1
 80009ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	4619      	mov	r1, r3
 80009fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a00:	f000 fde6 	bl	80015d0 <HAL_GPIO_Init>

}
 8000a04:	bf00      	nop
 8000a06:	3718      	adds	r7, #24
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	48000400 	.word	0x48000400

08000a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a14:	b672      	cpsid	i
}
 8000a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <Error_Handler+0x8>

08000a1a <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bc80      	pop	{r7}
 8000a38:	4770      	bx	lr

08000a3a <LL_AHB2_GRP1_EnableClock>:
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	b085      	sub	sp, #20
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
}
 8000a60:	bf00      	nop
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bc80      	pop	{r7}
 8000a68:	4770      	bx	lr

08000a6a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	b085      	sub	sp, #20
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000a72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a76:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a86:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
}
 8000a90:	bf00      	nop
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr

08000a9a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	b085      	sub	sp, #20
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aa6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000aa8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ab6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4013      	ands	r3, r2
 8000abc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000abe:	68fb      	ldr	r3, [r7, #12]
}
 8000ac0:	bf00      	nop
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr

08000aca <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr
	...

08000ad8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a05      	ldr	r2, [pc, #20]	; (8000afc <HAL_ADC_MspInit+0x24>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d103      	bne.n	8000af2 <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000aea:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000aee:	f7ff ffd4 	bl	8000a9a <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }

}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40012400 	.word	0x40012400

08000b00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b096      	sub	sp, #88	; 0x58
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b18:	f107 030c 	add.w	r3, r7, #12
 8000b1c:	2238      	movs	r2, #56	; 0x38
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4618      	mov	r0, r3
 8000b22:	f003 fce3 	bl	80044ec <memset>
  if(hi2c->Instance==I2C2)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a21      	ldr	r2, [pc, #132]	; (8000bb0 <HAL_I2C_MspInit+0xb0>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d13b      	bne.n	8000ba8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000b30:	2380      	movs	r3, #128	; 0x80
 8000b32:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000b34:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b3a:	f107 030c 	add.w	r3, r7, #12
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f002 fb10 	bl	8003164 <HAL_RCCEx_PeriphCLKConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000b4a:	f7ff ff61 	bl	8000a10 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	2001      	movs	r0, #1
 8000b50:	f7ff ff73 	bl	8000a3a <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b54:	2002      	movs	r0, #2
 8000b56:	f7ff ff70 	bl	8000a3a <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b5e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b60:	2312      	movs	r3, #18
 8000b62:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000b6c:	2304      	movs	r3, #4
 8000b6e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b70:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b74:	4619      	mov	r1, r3
 8000b76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b7a:	f000 fd29 	bl	80015d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b82:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b84:	2312      	movs	r3, #18
 8000b86:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000b90:	2304      	movs	r3, #4
 8000b92:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b94:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4806      	ldr	r0, [pc, #24]	; (8000bb4 <HAL_I2C_MspInit+0xb4>)
 8000b9c:	f000 fd18 	bl	80015d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ba0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000ba4:	f7ff ff61 	bl	8000a6a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ba8:	bf00      	nop
 8000baa:	3758      	adds	r7, #88	; 0x58
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40005800 	.word	0x40005800
 8000bb4:	48000400 	.word	0x48000400

08000bb8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b090      	sub	sp, #64	; 0x40
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bc0:	f107 0308 	add.w	r3, r7, #8
 8000bc4:	2238      	movs	r2, #56	; 0x38
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f003 fc8f 	bl	80044ec <memset>
  if(hrtc->Instance==RTC)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a0e      	ldr	r2, [pc, #56]	; (8000c0c <HAL_RTC_MspInit+0x54>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d115      	bne.n	8000c04 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000bd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bdc:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000bde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000be2:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000be4:	f107 0308 	add.w	r3, r7, #8
 8000be8:	4618      	mov	r0, r3
 8000bea:	f002 fabb 	bl	8003164 <HAL_RCCEx_PeriphCLKConfig>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000bf4:	f7ff ff0c 	bl	8000a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000bf8:	f7ff ff0f 	bl	8000a1a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000bfc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000c00:	f7ff ff33 	bl	8000a6a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c04:	bf00      	nop
 8000c06:	3740      	adds	r7, #64	; 0x40
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40002800 	.word	0x40002800

08000c10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b096      	sub	sp, #88	; 0x58
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c28:	f107 030c 	add.w	r3, r7, #12
 8000c2c:	2238      	movs	r2, #56	; 0x38
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4618      	mov	r0, r3
 8000c32:	f003 fc5b 	bl	80044ec <memset>
  if(hspi->Instance==SPI2)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a21      	ldr	r2, [pc, #132]	; (8000cc0 <HAL_SPI_MspInit+0xb0>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d13b      	bne.n	8000cb8 <HAL_SPI_MspInit+0xa8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 8000c40:	2310      	movs	r3, #16
 8000c42:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 8000c44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c48:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c4a:	f107 030c 	add.w	r3, r7, #12
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f002 fa88 	bl	8003164 <HAL_RCCEx_PeriphCLKConfig>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8000c5a:	f7ff fed9 	bl	8000a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c5e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000c62:	f7ff ff02 	bl	8000a6a <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c66:	2001      	movs	r0, #1
 8000c68:	f7ff fee7 	bl	8000a3a <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6c:	2002      	movs	r0, #2
 8000c6e:	f7ff fee4 	bl	8000a3a <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PA10     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c76:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c84:	2305      	movs	r3, #5
 8000c86:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c88:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c92:	f000 fc9d 	bl	80015d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c9a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ca8:	2305      	movs	r3, #5
 8000caa:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4804      	ldr	r0, [pc, #16]	; (8000cc4 <HAL_SPI_MspInit+0xb4>)
 8000cb4:	f000 fc8c 	bl	80015d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000cb8:	bf00      	nop
 8000cba:	3758      	adds	r7, #88	; 0x58
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40003800 	.word	0x40003800
 8000cc4:	48000400 	.word	0x48000400

08000cc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b096      	sub	sp, #88	; 0x58
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ce0:	f107 030c 	add.w	r3, r7, #12
 8000ce4:	2238      	movs	r2, #56	; 0x38
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f003 fbff 	bl	80044ec <memset>
  if(huart->Instance==USART1)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a16      	ldr	r2, [pc, #88]	; (8000d4c <HAL_UART_MspInit+0x84>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d125      	bne.n	8000d44 <HAL_UART_MspInit+0x7c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000cfc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000d00:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d02:	f107 030c 	add.w	r3, r7, #12
 8000d06:	4618      	mov	r0, r3
 8000d08:	f002 fa2c 	bl	8003164 <HAL_RCCEx_PeriphCLKConfig>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d12:	f7ff fe7d 	bl	8000a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d16:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000d1a:	f7ff febe 	bl	8000a9a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1e:	2002      	movs	r0, #2
 8000d20:	f7ff fe8b 	bl	8000a3a <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000d24:	23c0      	movs	r3, #192	; 0xc0
 8000d26:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d30:	2300      	movs	r3, #0
 8000d32:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d34:	2307      	movs	r3, #7
 8000d36:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d38:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4804      	ldr	r0, [pc, #16]	; (8000d50 <HAL_UART_MspInit+0x88>)
 8000d40:	f000 fc46 	bl	80015d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d44:	bf00      	nop
 8000d46:	3758      	adds	r7, #88	; 0x58
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40013800 	.word	0x40013800
 8000d50:	48000400 	.word	0x48000400

08000d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <NMI_Handler+0x4>

08000d5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <HardFault_Handler+0x4>

08000d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <MemManage_Handler+0x4>

08000d66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <BusFault_Handler+0x4>

08000d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <UsageFault_Handler+0x4>

08000d72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr

08000d7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr

08000d8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr

08000d96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d9a:	f000 f8c3 	bl	8000f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
	...

08000da4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dac:	4a14      	ldr	r2, [pc, #80]	; (8000e00 <_sbrk+0x5c>)
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <_sbrk+0x60>)
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db8:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <_sbrk+0x64>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d102      	bne.n	8000dc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <_sbrk+0x64>)
 8000dc2:	4a12      	ldr	r2, [pc, #72]	; (8000e0c <_sbrk+0x68>)
 8000dc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <_sbrk+0x64>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4413      	add	r3, r2
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d207      	bcs.n	8000de4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd4:	f003 fb60 	bl	8004498 <__errno>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	220c      	movs	r2, #12
 8000ddc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295
 8000de2:	e009      	b.n	8000df8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <_sbrk+0x64>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dea:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <_sbrk+0x64>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	4a05      	ldr	r2, [pc, #20]	; (8000e08 <_sbrk+0x64>)
 8000df4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000df6:	68fb      	ldr	r3, [r7, #12]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3718      	adds	r7, #24
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20010000 	.word	0x20010000
 8000e04:	00000400 	.word	0x00000400
 8000e08:	20000268 	.word	0x20000268
 8000e0c:	20000280 	.word	0x20000280

08000e10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr

08000e1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e1c:	480d      	ldr	r0, [pc, #52]	; (8000e54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e1e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e20:	f7ff fff6 	bl	8000e10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e24:	480c      	ldr	r0, [pc, #48]	; (8000e58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e26:	490d      	ldr	r1, [pc, #52]	; (8000e5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e28:	4a0d      	ldr	r2, [pc, #52]	; (8000e60 <LoopForever+0xe>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e2c:	e002      	b.n	8000e34 <LoopCopyDataInit>

08000e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e32:	3304      	adds	r3, #4

08000e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e38:	d3f9      	bcc.n	8000e2e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e3c:	4c0a      	ldr	r4, [pc, #40]	; (8000e68 <LoopForever+0x16>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e40:	e001      	b.n	8000e46 <LoopFillZerobss>

08000e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e44:	3204      	adds	r2, #4

08000e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e48:	d3fb      	bcc.n	8000e42 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e4a:	f003 fb2b 	bl	80044a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e4e:	f7ff fb81 	bl	8000554 <main>

08000e52 <LoopForever>:

LoopForever:
    b LoopForever
 8000e52:	e7fe      	b.n	8000e52 <LoopForever>
  ldr   r0, =_estack
 8000e54:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e5c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e60:	08004f38 	.word	0x08004f38
  ldr r2, =_sbss
 8000e64:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e68:	20000280 	.word	0x20000280

08000e6c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e6c:	e7fe      	b.n	8000e6c <ADC_IRQHandler>
	...

08000e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e76:	2300      	movs	r3, #0
 8000e78:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e7a:	2003      	movs	r0, #3
 8000e7c:	f000 fb76 	bl	800156c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000e80:	f001 ff92 	bl	8002da8 <HAL_RCC_GetHCLKFreq>
 8000e84:	4603      	mov	r3, r0
 8000e86:	4a09      	ldr	r2, [pc, #36]	; (8000eac <HAL_Init+0x3c>)
 8000e88:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e8a:	200f      	movs	r0, #15
 8000e8c:	f000 f810 	bl	8000eb0 <HAL_InitTick>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d002      	beq.n	8000e9c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	71fb      	strb	r3, [r7, #7]
 8000e9a:	e001      	b.n	8000ea0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e9c:	f7ff fe15 	bl	8000aca <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000000 	.word	0x20000000

08000eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ebc:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <HAL_InitTick+0x6c>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d024      	beq.n	8000f0e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ec4:	f001 ff70 	bl	8002da8 <HAL_RCC_GetHCLKFreq>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <HAL_InitTick+0x6c>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed4:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 fb6a 	bl	80015b6 <HAL_SYSTICK_Config>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d10f      	bne.n	8000f08 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2b0f      	cmp	r3, #15
 8000eec:	d809      	bhi.n	8000f02 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	6879      	ldr	r1, [r7, #4]
 8000ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef6:	f000 fb44 	bl	8001582 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000efa:	4a09      	ldr	r2, [pc, #36]	; (8000f20 <HAL_InitTick+0x70>)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6013      	str	r3, [r2, #0]
 8000f00:	e007      	b.n	8000f12 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	73fb      	strb	r3, [r7, #15]
 8000f06:	e004      	b.n	8000f12 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	73fb      	strb	r3, [r7, #15]
 8000f0c:	e001      	b.n	8000f12 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	20000004 	.word	0x20000004

08000f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <HAL_IncTick+0x1c>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <HAL_IncTick+0x20>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4413      	add	r3, r2
 8000f34:	4a03      	ldr	r2, [pc, #12]	; (8000f44 <HAL_IncTick+0x20>)
 8000f36:	6013      	str	r3, [r2, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr
 8000f40:	20000008 	.word	0x20000008
 8000f44:	2000026c 	.word	0x2000026c

08000f48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f4c:	4b02      	ldr	r3, [pc, #8]	; (8000f58 <HAL_GetTick+0x10>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr
 8000f58:	2000026c 	.word	0x2000026c

08000f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f64:	f7ff fff0 	bl	8000f48 <HAL_GetTick>
 8000f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f74:	d005      	beq.n	8000f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f76:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <HAL_Delay+0x44>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4413      	add	r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f82:	bf00      	nop
 8000f84:	f7ff ffe0 	bl	8000f48 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d8f7      	bhi.n	8000f84 <HAL_Delay+0x28>
  {
  }
}
 8000f94:	bf00      	nop
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000008 	.word	0x20000008

08000fa4 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	695a      	ldr	r2, [r3, #20]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	f003 0304 	and.w	r3, r3, #4
 8000fba:	2107      	movs	r1, #7
 8000fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	401a      	ands	r2, r3
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	f003 0304 	and.w	r3, r3, #4
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd0:	431a      	orrs	r2, r3
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000fd6:	bf00      	nop
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr

08000fe0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	695a      	ldr	r2, [r3, #20]
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	f003 0304 	and.w	r3, r3, #4
 8000ff4:	2107      	movs	r1, #7
 8000ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffa:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001002:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001006:	4618      	mov	r0, r3
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr

08001010 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001020:	f023 0317 	bic.w	r3, r3, #23
 8001024:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr

08001036 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001036:	b480      	push	{r7}
 8001038:	b083      	sub	sp, #12
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001046:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800104a:	d101      	bne.n	8001050 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800104c:	2301      	movs	r3, #1
 800104e:	e000      	b.n	8001052 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr

0800105c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	f003 0301 	and.w	r3, r3, #1
 800106c:	2b01      	cmp	r3, #1
 800106e:	d101      	bne.n	8001074 <LL_ADC_IsEnabled+0x18>
 8001070:	2301      	movs	r3, #1
 8001072:	e000      	b.n	8001076 <LL_ADC_IsEnabled+0x1a>
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr

08001080 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f003 0304 	and.w	r3, r3, #4
 8001090:	2b04      	cmp	r3, #4
 8001092:	d101      	bne.n	8001098 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001094:	2301      	movs	r3, #1
 8001096:	e000      	b.n	800109a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr

080010a4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010ac:	2300      	movs	r3, #0
 80010ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e19e      	b.n	8001404 <HAL_ADC_Init+0x360>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	691b      	ldr	r3, [r3, #16]
 80010ca:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d109      	bne.n	80010e8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff fcff 	bl	8000ad8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ffa2 	bl	8001036 <LL_ADC_IsInternalRegulatorEnabled>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d115      	bne.n	8001124 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff87 	bl	8001010 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001102:	4b99      	ldr	r3, [pc, #612]	; (8001368 <HAL_ADC_Init+0x2c4>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	099b      	lsrs	r3, r3, #6
 8001108:	4a98      	ldr	r2, [pc, #608]	; (800136c <HAL_ADC_Init+0x2c8>)
 800110a:	fba2 2303 	umull	r2, r3, r2, r3
 800110e:	099b      	lsrs	r3, r3, #6
 8001110:	3301      	adds	r3, #1
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001116:	e002      	b.n	800111e <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	3b01      	subs	r3, #1
 800111c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1f9      	bne.n	8001118 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff84 	bl	8001036 <LL_ADC_IsInternalRegulatorEnabled>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d10d      	bne.n	8001150 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001138:	f043 0210 	orr.w	r2, r3, #16
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001144:	f043 0201 	orr.w	r2, r3, #1
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff93 	bl	8001080 <LL_ADC_REG_IsConversionOngoing>
 800115a:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001160:	f003 0310 	and.w	r3, r3, #16
 8001164:	2b00      	cmp	r3, #0
 8001166:	f040 8144 	bne.w	80013f2 <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2b00      	cmp	r3, #0
 800116e:	f040 8140 	bne.w	80013f2 <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001176:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800117a:	f043 0202 	orr.w	r2, r3, #2
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff ff68 	bl	800105c <LL_ADC_IsEnabled>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	f040 80a7 	bne.w	80012e2 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	7e1b      	ldrb	r3, [r3, #24]
 800119c:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800119e:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	7e5b      	ldrb	r3, [r3, #25]
 80011a4:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80011a6:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	7e9b      	ldrb	r3, [r3, #26]
 80011ac:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80011ae:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80011b4:	2a00      	cmp	r2, #0
 80011b6:	d002      	beq.n	80011be <HAL_ADC_Init+0x11a>
 80011b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011bc:	e000      	b.n	80011c0 <HAL_ADC_Init+0x11c>
 80011be:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80011c0:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80011c6:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	691b      	ldr	r3, [r3, #16]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	da04      	bge.n	80011da <HAL_ADC_Init+0x136>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011d8:	e001      	b.n	80011de <HAL_ADC_Init+0x13a>
 80011da:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 80011de:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80011e6:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80011e8:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d114      	bne.n	8001224 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	7e9b      	ldrb	r3, [r3, #26]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d104      	bne.n	800120c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001208:	61bb      	str	r3, [r7, #24]
 800120a:	e00b      	b.n	8001224 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001210:	f043 0220 	orr.w	r2, r3, #32
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800121c:	f043 0201 	orr.w	r2, r3, #1
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001228:	2b00      	cmp	r3, #0
 800122a:	d009      	beq.n	8001240 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001230:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001238:	4313      	orrs	r3, r2
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 800124a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	6812      	ldr	r2, [r2, #0]
 8001252:	69b9      	ldr	r1, [r7, #24]
 8001254:	430b      	orrs	r3, r1
 8001256:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001264:	4313      	orrs	r3, r2
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	4313      	orrs	r3, r2
 800126a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001272:	2b01      	cmp	r3, #1
 8001274:	d111      	bne.n	800129a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001282:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001288:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800128e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	4313      	orrs	r3, r2
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	691a      	ldr	r2, [r3, #16]
 80012a0:	4b33      	ldr	r3, [pc, #204]	; (8001370 <HAL_ADC_Init+0x2cc>)
 80012a2:	4013      	ands	r3, r2
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	6812      	ldr	r2, [r2, #0]
 80012a8:	6979      	ldr	r1, [r7, #20]
 80012aa:	430b      	orrs	r3, r1
 80012ac:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80012b6:	d014      	beq.n	80012e2 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80012bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012c0:	d00f      	beq.n	80012e2 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80012c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80012ca:	d00a      	beq.n	80012e2 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 80012cc:	4b29      	ldr	r3, [pc, #164]	; (8001374 <HAL_ADC_Init+0x2d0>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80012dc:	4925      	ldr	r1, [pc, #148]	; (8001374 <HAL_ADC_Init+0x2d0>)
 80012de:	4313      	orrs	r3, r2
 80012e0:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6818      	ldr	r0, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ea:	461a      	mov	r2, r3
 80012ec:	2100      	movs	r1, #0
 80012ee:	f7ff fe59 	bl	8000fa4 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6818      	ldr	r0, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012fa:	461a      	mov	r2, r3
 80012fc:	491e      	ldr	r1, [pc, #120]	; (8001378 <HAL_ADC_Init+0x2d4>)
 80012fe:	f7ff fe51 	bl	8000fa4 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d108      	bne.n	800131c <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f062 020f 	orn	r2, r2, #15
 8001318:	629a      	str	r2, [r3, #40]	; 0x28
 800131a:	e042      	b.n	80013a2 <HAL_ADC_Init+0x2fe>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	691b      	ldr	r3, [r3, #16]
 8001320:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001324:	d13d      	bne.n	80013a2 <HAL_ADC_Init+0x2fe>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001326:	2300      	movs	r3, #0
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	e00c      	b.n	8001346 <HAL_ADC_Init+0x2a2>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	fa22 f303 	lsr.w	r3, r2, r3
 8001338:	f003 030f 	and.w	r3, r3, #15
 800133c:	2b0f      	cmp	r3, #15
 800133e:	d006      	beq.n	800134e <HAL_ADC_Init+0x2aa>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	3301      	adds	r3, #1
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	2b07      	cmp	r3, #7
 800134a:	d9ef      	bls.n	800132c <HAL_ADC_Init+0x288>
 800134c:	e000      	b.n	8001350 <HAL_ADC_Init+0x2ac>
            ADC_CHSELR_SQ1)
        {
          break;
 800134e:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d112      	bne.n	800137c <HAL_ADC_Init+0x2d8>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f062 020f 	orn	r2, r2, #15
 8001364:	629a      	str	r2, [r3, #40]	; 0x28
 8001366:	e01c      	b.n	80013a2 <HAL_ADC_Init+0x2fe>
 8001368:	20000000 	.word	0x20000000
 800136c:	053e2d63 	.word	0x053e2d63
 8001370:	1ffffc02 	.word	0x1ffffc02
 8001374:	40012708 	.word	0x40012708
 8001378:	03ffff04 	.word	0x03ffff04
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	3b01      	subs	r3, #1
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	f003 031c 	and.w	r3, r3, #28
 800138e:	f06f 020f 	mvn.w	r2, #15
 8001392:	fa02 f103 	lsl.w	r1, r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	430a      	orrs	r2, r1
 80013a0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2100      	movs	r1, #0
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fe19 	bl	8000fe0 <LL_ADC_GetSamplingTimeCommonChannels>
 80013ae:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d10b      	bne.n	80013d0 <HAL_ADC_Init+0x32c>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c2:	f023 0303 	bic.w	r3, r3, #3
 80013c6:	f043 0201 	orr.w	r2, r3, #1
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80013ce:	e018      	b.n	8001402 <HAL_ADC_Init+0x35e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d4:	f023 0312 	bic.w	r3, r3, #18
 80013d8:	f043 0210 	orr.w	r2, r3, #16
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e4:	f043 0201 	orr.w	r2, r3, #1
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80013f0:	e007      	b.n	8001402 <HAL_ADC_Init+0x35e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f6:	f043 0210 	orr.w	r2, r3, #16
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8001402:	7ffb      	ldrb	r3, [r7, #31]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3720      	adds	r7, #32
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800141c:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <__NVIC_SetPriorityGrouping+0x44>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001428:	4013      	ands	r3, r2
 800142a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001434:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800143c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800143e:	4a04      	ldr	r2, [pc, #16]	; (8001450 <__NVIC_SetPriorityGrouping+0x44>)
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	60d3      	str	r3, [r2, #12]
}
 8001444:	bf00      	nop
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001458:	4b04      	ldr	r3, [pc, #16]	; (800146c <__NVIC_GetPriorityGrouping+0x18>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	0a1b      	lsrs	r3, r3, #8
 800145e:	f003 0307 	and.w	r3, r3, #7
}
 8001462:	4618      	mov	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	6039      	str	r1, [r7, #0]
 800147a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001480:	2b00      	cmp	r3, #0
 8001482:	db0a      	blt.n	800149a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	b2da      	uxtb	r2, r3
 8001488:	490c      	ldr	r1, [pc, #48]	; (80014bc <__NVIC_SetPriority+0x4c>)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	0112      	lsls	r2, r2, #4
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	440b      	add	r3, r1
 8001494:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001498:	e00a      	b.n	80014b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4908      	ldr	r1, [pc, #32]	; (80014c0 <__NVIC_SetPriority+0x50>)
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	f003 030f 	and.w	r3, r3, #15
 80014a6:	3b04      	subs	r3, #4
 80014a8:	0112      	lsls	r2, r2, #4
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	440b      	add	r3, r1
 80014ae:	761a      	strb	r2, [r3, #24]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	e000e100 	.word	0xe000e100
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b089      	sub	sp, #36	; 0x24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f1c3 0307 	rsb	r3, r3, #7
 80014de:	2b04      	cmp	r3, #4
 80014e0:	bf28      	it	cs
 80014e2:	2304      	movcs	r3, #4
 80014e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3304      	adds	r3, #4
 80014ea:	2b06      	cmp	r3, #6
 80014ec:	d902      	bls.n	80014f4 <NVIC_EncodePriority+0x30>
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3b03      	subs	r3, #3
 80014f2:	e000      	b.n	80014f6 <NVIC_EncodePriority+0x32>
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f8:	f04f 32ff 	mov.w	r2, #4294967295
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43da      	mvns	r2, r3
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	401a      	ands	r2, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800150c:	f04f 31ff 	mov.w	r1, #4294967295
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	fa01 f303 	lsl.w	r3, r1, r3
 8001516:	43d9      	mvns	r1, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	4313      	orrs	r3, r2
         );
}
 800151e:	4618      	mov	r0, r3
 8001520:	3724      	adds	r7, #36	; 0x24
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr

08001528 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3b01      	subs	r3, #1
 8001534:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001538:	d301      	bcc.n	800153e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800153a:	2301      	movs	r3, #1
 800153c:	e00f      	b.n	800155e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800153e:	4a0a      	ldr	r2, [pc, #40]	; (8001568 <SysTick_Config+0x40>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3b01      	subs	r3, #1
 8001544:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001546:	210f      	movs	r1, #15
 8001548:	f04f 30ff 	mov.w	r0, #4294967295
 800154c:	f7ff ff90 	bl	8001470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <SysTick_Config+0x40>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001556:	4b04      	ldr	r3, [pc, #16]	; (8001568 <SysTick_Config+0x40>)
 8001558:	2207      	movs	r2, #7
 800155a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	e000e010 	.word	0xe000e010

0800156c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff ff49 	bl	800140c <__NVIC_SetPriorityGrouping>
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b086      	sub	sp, #24
 8001586:	af00      	add	r7, sp, #0
 8001588:	4603      	mov	r3, r0
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
 800158e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001590:	f7ff ff60 	bl	8001454 <__NVIC_GetPriorityGrouping>
 8001594:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	68b9      	ldr	r1, [r7, #8]
 800159a:	6978      	ldr	r0, [r7, #20]
 800159c:	f7ff ff92 	bl	80014c4 <NVIC_EncodePriority>
 80015a0:	4602      	mov	r2, r0
 80015a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a6:	4611      	mov	r1, r2
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff ff61 	bl	8001470 <__NVIC_SetPriority>
}
 80015ae:	bf00      	nop
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff ffb2 	bl	8001528 <SysTick_Config>
 80015c4:	4603      	mov	r3, r0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b087      	sub	sp, #28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015de:	e140      	b.n	8001862 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	2101      	movs	r1, #1
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ec:	4013      	ands	r3, r2
 80015ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f000 8132 	beq.w	800185c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 0303 	and.w	r3, r3, #3
 8001600:	2b01      	cmp	r3, #1
 8001602:	d005      	beq.n	8001610 <HAL_GPIO_Init+0x40>
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d130      	bne.n	8001672 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	2203      	movs	r2, #3
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4013      	ands	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	68da      	ldr	r2, [r3, #12]
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001646:	2201      	movs	r2, #1
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43db      	mvns	r3, r3
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	4013      	ands	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	091b      	lsrs	r3, r3, #4
 800165c:	f003 0201 	and.w	r2, r3, #1
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	4313      	orrs	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	2b03      	cmp	r3, #3
 800167c:	d017      	beq.n	80016ae <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	2203      	movs	r2, #3
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43db      	mvns	r3, r3
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	4013      	ands	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	689a      	ldr	r2, [r3, #8]
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f003 0303 	and.w	r3, r3, #3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d123      	bne.n	8001702 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	08da      	lsrs	r2, r3, #3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3208      	adds	r2, #8
 80016c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	220f      	movs	r2, #15
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43db      	mvns	r3, r3
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4013      	ands	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	691a      	ldr	r2, [r3, #16]
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	f003 0307 	and.w	r3, r3, #7
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	08da      	lsrs	r2, r3, #3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3208      	adds	r2, #8
 80016fc:	6939      	ldr	r1, [r7, #16]
 80016fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	2203      	movs	r2, #3
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f003 0203 	and.w	r2, r3, #3
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800173e:	2b00      	cmp	r3, #0
 8001740:	f000 808c 	beq.w	800185c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001744:	4a4e      	ldr	r2, [pc, #312]	; (8001880 <HAL_GPIO_Init+0x2b0>)
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	089b      	lsrs	r3, r3, #2
 800174a:	3302      	adds	r3, #2
 800174c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001750:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	f003 0303 	and.w	r3, r3, #3
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	2207      	movs	r2, #7
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	4013      	ands	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800176e:	d00d      	beq.n	800178c <HAL_GPIO_Init+0x1bc>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a44      	ldr	r2, [pc, #272]	; (8001884 <HAL_GPIO_Init+0x2b4>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d007      	beq.n	8001788 <HAL_GPIO_Init+0x1b8>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a43      	ldr	r2, [pc, #268]	; (8001888 <HAL_GPIO_Init+0x2b8>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d101      	bne.n	8001784 <HAL_GPIO_Init+0x1b4>
 8001780:	2302      	movs	r3, #2
 8001782:	e004      	b.n	800178e <HAL_GPIO_Init+0x1be>
 8001784:	2307      	movs	r3, #7
 8001786:	e002      	b.n	800178e <HAL_GPIO_Init+0x1be>
 8001788:	2301      	movs	r3, #1
 800178a:	e000      	b.n	800178e <HAL_GPIO_Init+0x1be>
 800178c:	2300      	movs	r3, #0
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	f002 0203 	and.w	r2, r2, #3
 8001794:	0092      	lsls	r2, r2, #2
 8001796:	4093      	lsls	r3, r2
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	4313      	orrs	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800179e:	4938      	ldr	r1, [pc, #224]	; (8001880 <HAL_GPIO_Init+0x2b0>)
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	089b      	lsrs	r3, r3, #2
 80017a4:	3302      	adds	r3, #2
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017ac:	4b37      	ldr	r3, [pc, #220]	; (800188c <HAL_GPIO_Init+0x2bc>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	43db      	mvns	r3, r3
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	4013      	ands	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017d0:	4a2e      	ldr	r2, [pc, #184]	; (800188c <HAL_GPIO_Init+0x2bc>)
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80017d6:	4b2d      	ldr	r3, [pc, #180]	; (800188c <HAL_GPIO_Init+0x2bc>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	43db      	mvns	r3, r3
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	4013      	ands	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017fa:	4a24      	ldr	r2, [pc, #144]	; (800188c <HAL_GPIO_Init+0x2bc>)
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001800:	4b22      	ldr	r3, [pc, #136]	; (800188c <HAL_GPIO_Init+0x2bc>)
 8001802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001806:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	43db      	mvns	r3, r3
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4013      	ands	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4313      	orrs	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001826:	4a19      	ldr	r2, [pc, #100]	; (800188c <HAL_GPIO_Init+0x2bc>)
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800182e:	4b17      	ldr	r3, [pc, #92]	; (800188c <HAL_GPIO_Init+0x2bc>)
 8001830:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001834:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	43db      	mvns	r3, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4013      	ands	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	4313      	orrs	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001854:	4a0d      	ldr	r2, [pc, #52]	; (800188c <HAL_GPIO_Init+0x2bc>)
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	3301      	adds	r3, #1
 8001860:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	fa22 f303 	lsr.w	r3, r2, r3
 800186c:	2b00      	cmp	r3, #0
 800186e:	f47f aeb7 	bne.w	80015e0 <HAL_GPIO_Init+0x10>
  }
}
 8001872:	bf00      	nop
 8001874:	bf00      	nop
 8001876:	371c      	adds	r7, #28
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	40010000 	.word	0x40010000
 8001884:	48000400 	.word	0x48000400
 8001888:	48000800 	.word	0x48000800
 800188c:	58000800 	.word	0x58000800

08001890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	460b      	mov	r3, r1
 800189a:	807b      	strh	r3, [r7, #2]
 800189c:	4613      	mov	r3, r2
 800189e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018a0:	787b      	ldrb	r3, [r7, #1]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018a6:	887a      	ldrh	r2, [r7, #2]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018ac:	e002      	b.n	80018b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018ae:	887a      	ldrh	r2, [r7, #2]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr

080018be <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b082      	sub	sp, #8
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d101      	bne.n	80018d0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e081      	b.n	80019d4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d106      	bne.n	80018ea <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f7ff f90b 	bl	8000b00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2224      	movs	r2, #36	; 0x24
 80018ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f022 0201 	bic.w	r2, r2, #1
 8001900:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800190e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800191e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d107      	bne.n	8001938 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	e006      	b.n	8001946 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001944:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	2b02      	cmp	r3, #2
 800194c:	d104      	bne.n	8001958 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001956:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	6812      	ldr	r2, [r2, #0]
 8001962:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800196a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68da      	ldr	r2, [r3, #12]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800197a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691a      	ldr	r2, [r3, #16]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	695b      	ldr	r3, [r3, #20]
 8001984:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	430a      	orrs	r2, r1
 8001994:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69d9      	ldr	r1, [r3, #28]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a1a      	ldr	r2, [r3, #32]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f042 0201 	orr.w	r2, r2, #1
 80019b4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2220      	movs	r2, #32
 80019c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08a      	sub	sp, #40	; 0x28
 80019e0:	af02      	add	r7, sp, #8
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	607a      	str	r2, [r7, #4]
 80019e6:	603b      	str	r3, [r7, #0]
 80019e8:	460b      	mov	r3, r1
 80019ea:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b20      	cmp	r3, #32
 80019fa:	f040 80f1 	bne.w	8001be0 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a0c:	d101      	bne.n	8001a12 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	e0e7      	b.n	8001be2 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d101      	bne.n	8001a20 <HAL_I2C_IsDeviceReady+0x44>
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	e0e0      	b.n	8001be2 <HAL_I2C_IsDeviceReady+0x206>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2224      	movs	r2, #36	; 0x24
 8001a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2200      	movs	r2, #0
 8001a34:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d107      	bne.n	8001a4e <HAL_I2C_IsDeviceReady+0x72>
 8001a3e:	897b      	ldrh	r3, [r7, #10]
 8001a40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a4c:	e004      	b.n	8001a58 <HAL_I2C_IsDeviceReady+0x7c>
 8001a4e:	897b      	ldrh	r3, [r7, #10]
 8001a50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a54:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	6812      	ldr	r2, [r2, #0]
 8001a5c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001a5e:	f7ff fa73 	bl	8000f48 <HAL_GetTick>
 8001a62:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	f003 0320 	and.w	r3, r3, #32
 8001a6e:	2b20      	cmp	r3, #32
 8001a70:	bf0c      	ite	eq
 8001a72:	2301      	moveq	r3, #1
 8001a74:	2300      	movne	r3, #0
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	f003 0310 	and.w	r3, r3, #16
 8001a84:	2b10      	cmp	r3, #16
 8001a86:	bf0c      	ite	eq
 8001a88:	2301      	moveq	r3, #1
 8001a8a:	2300      	movne	r3, #0
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001a90:	e034      	b.n	8001afc <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a98:	d01a      	beq.n	8001ad0 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a9a:	f7ff fa55 	bl	8000f48 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d302      	bcc.n	8001ab0 <HAL_I2C_IsDeviceReady+0xd4>
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10f      	bne.n	8001ad0 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2220      	movs	r2, #32
 8001ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abc:	f043 0220 	orr.w	r2, r3, #32
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e088      	b.n	8001be2 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	f003 0320 	and.w	r3, r3, #32
 8001ada:	2b20      	cmp	r3, #32
 8001adc:	bf0c      	ite	eq
 8001ade:	2301      	moveq	r3, #1
 8001ae0:	2300      	movne	r3, #0
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	f003 0310 	and.w	r3, r3, #16
 8001af0:	2b10      	cmp	r3, #16
 8001af2:	bf0c      	ite	eq
 8001af4:	2301      	moveq	r3, #1
 8001af6:	2300      	movne	r3, #0
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001afc:	7ffb      	ldrb	r3, [r7, #31]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d102      	bne.n	8001b08 <HAL_I2C_IsDeviceReady+0x12c>
 8001b02:	7fbb      	ldrb	r3, [r7, #30]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0c4      	beq.n	8001a92 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	f003 0310 	and.w	r3, r3, #16
 8001b12:	2b10      	cmp	r3, #16
 8001b14:	d01a      	beq.n	8001b4c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2120      	movs	r1, #32
 8001b20:	68f8      	ldr	r0, [r7, #12]
 8001b22:	f000 f862 	bl	8001bea <I2C_WaitOnFlagUntilTimeout>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e058      	b.n	8001be2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2220      	movs	r2, #32
 8001b36:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2220      	movs	r2, #32
 8001b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	e04a      	b.n	8001be2 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	2200      	movs	r2, #0
 8001b54:	2120      	movs	r1, #32
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f000 f847 	bl	8001bea <I2C_WaitOnFlagUntilTimeout>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e03d      	b.n	8001be2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2210      	movs	r2, #16
 8001b6c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2220      	movs	r2, #32
 8001b74:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d118      	bne.n	8001bb0 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b8c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	2200      	movs	r2, #0
 8001b96:	2120      	movs	r1, #32
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f000 f826 	bl	8001bea <I2C_WaitOnFlagUntilTimeout>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e01c      	b.n	8001be2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2220      	movs	r2, #32
 8001bae:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	f63f af3b 	bhi.w	8001a36 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2220      	movs	r2, #32
 8001bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bcc:	f043 0220 	orr.w	r2, r3, #32
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e000      	b.n	8001be2 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001be0:	2302      	movs	r3, #2
  }
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3720      	adds	r7, #32
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b084      	sub	sp, #16
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	60f8      	str	r0, [r7, #12]
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	603b      	str	r3, [r7, #0]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bfa:	e022      	b.n	8001c42 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c02:	d01e      	beq.n	8001c42 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c04:	f7ff f9a0 	bl	8000f48 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d302      	bcc.n	8001c1a <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d113      	bne.n	8001c42 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	f043 0220 	orr.w	r2, r3, #32
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2220      	movs	r2, #32
 8001c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e00f      	b.n	8001c62 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	699a      	ldr	r2, [r3, #24]
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	68ba      	ldr	r2, [r7, #8]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	bf0c      	ite	eq
 8001c52:	2301      	moveq	r3, #1
 8001c54:	2300      	movne	r3, #0
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	461a      	mov	r2, r3
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d0cd      	beq.n	8001bfc <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
 8001c72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b20      	cmp	r3, #32
 8001c7e:	d138      	bne.n	8001cf2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d101      	bne.n	8001c8e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	e032      	b.n	8001cf4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2224      	movs	r2, #36	; 0x24
 8001c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 0201 	bic.w	r2, r2, #1
 8001cac:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cbc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6819      	ldr	r1, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f042 0201 	orr.w	r2, r2, #1
 8001cdc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2220      	movs	r2, #32
 8001ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	e000      	b.n	8001cf4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001cf2:	2302      	movs	r3, #2
  }
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr

08001cfe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b085      	sub	sp, #20
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
 8001d06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	2b20      	cmp	r3, #32
 8001d12:	d139      	bne.n	8001d88 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d101      	bne.n	8001d22 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	e033      	b.n	8001d8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2224      	movs	r2, #36	; 0x24
 8001d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 0201 	bic.w	r2, r2, #1
 8001d40:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d50:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	021b      	lsls	r3, r3, #8
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 0201 	orr.w	r2, r2, #1
 8001d72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2220      	movs	r2, #32
 8001d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d84:	2300      	movs	r3, #0
 8001d86:	e000      	b.n	8001d8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d88:	2302      	movs	r3, #2
  }
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr

08001d94 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d98:	4b04      	ldr	r3, [pc, #16]	; (8001dac <HAL_PWR_EnableBkUpAccess+0x18>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a03      	ldr	r2, [pc, #12]	; (8001dac <HAL_PWR_EnableBkUpAccess+0x18>)
 8001d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da2:	6013      	str	r3, [r2, #0]
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr
 8001dac:	58000400 	.word	0x58000400

08001db0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001db4:	4b03      	ldr	r3, [pc, #12]	; (8001dc4 <HAL_PWREx_GetVoltageRange+0x14>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr
 8001dc4:	58000400 	.word	0x58000400

08001dc8 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001dcc:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dd8:	d101      	bne.n	8001dde <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e000      	b.n	8001de0 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr
 8001de8:	58000400 	.word	0x58000400

08001dec <LL_RCC_HSE_EnableTcxo>:
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dfa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dfe:	6013      	str	r3, [r2, #0]
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr

08001e08 <LL_RCC_HSE_DisableTcxo>:
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001e1a:	6013      	str	r3, [r2, #0]
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr

08001e24 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e36:	d101      	bne.n	8001e3c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e000      	b.n	8001e3e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr

08001e46 <LL_RCC_HSE_Enable>:
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e58:	6013      	str	r3, [r2, #0]
}
 8001e5a:	bf00      	nop
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bc80      	pop	{r7}
 8001e60:	4770      	bx	lr

08001e62 <LL_RCC_HSE_Disable>:
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e74:	6013      	str	r3, [r2, #0]
}
 8001e76:	bf00      	nop
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr

08001e7e <LL_RCC_HSE_IsReady>:
{
 8001e7e:	b480      	push	{r7}
 8001e80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e90:	d101      	bne.n	8001e96 <LL_RCC_HSE_IsReady+0x18>
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <LL_RCC_HSE_IsReady+0x1a>
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr

08001ea0 <LL_RCC_HSI_Enable>:
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb2:	6013      	str	r3, [r2, #0]
}
 8001eb4:	bf00      	nop
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr

08001ebc <LL_RCC_HSI_Disable>:
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ece:	6013      	str	r3, [r2, #0]
}
 8001ed0:	bf00      	nop
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr

08001ed8 <LL_RCC_HSI_IsReady>:
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eea:	d101      	bne.n	8001ef0 <LL_RCC_HSI_IsReady+0x18>
 8001eec:	2301      	movs	r3, #1
 8001eee:	e000      	b.n	8001ef2 <LL_RCC_HSI_IsReady+0x1a>
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc80      	pop	{r7}
 8001ef8:	4770      	bx	lr

08001efa <LL_RCC_HSI_SetCalibTrimming>:
{
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	061b      	lsls	r3, r3, #24
 8001f10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f14:	4313      	orrs	r3, r2
 8001f16:	604b      	str	r3, [r1, #4]
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc80      	pop	{r7}
 8001f20:	4770      	bx	lr

08001f22 <LL_RCC_LSE_IsReady>:
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d101      	bne.n	8001f3a <LL_RCC_LSE_IsReady+0x18>
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <LL_RCC_LSE_IsReady+0x1a>
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr

08001f44 <LL_RCC_LSI_Enable>:
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr

08001f64 <LL_RCC_LSI_Disable>:
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f74:	f023 0301 	bic.w	r3, r3, #1
 8001f78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr

08001f84 <LL_RCC_LSI_IsReady>:
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d101      	bne.n	8001f9c <LL_RCC_LSI_IsReady+0x18>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <LL_RCC_LSI_IsReady+0x1a>
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc80      	pop	{r7}
 8001fa4:	4770      	bx	lr

08001fa6 <LL_RCC_MSI_Enable>:
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	6013      	str	r3, [r2, #0]
}
 8001fba:	bf00      	nop
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr

08001fc2 <LL_RCC_MSI_Disable>:
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fd0:	f023 0301 	bic.w	r3, r3, #1
 8001fd4:	6013      	str	r3, [r2, #0]
}
 8001fd6:	bf00      	nop
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr

08001fde <LL_RCC_MSI_IsReady>:
{
 8001fde:	b480      	push	{r7}
 8001fe0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d101      	bne.n	8001ff4 <LL_RCC_MSI_IsReady+0x16>
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e000      	b.n	8001ff6 <LL_RCC_MSI_IsReady+0x18>
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bc80      	pop	{r7}
 8001ffc:	4770      	bx	lr

08001ffe <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0308 	and.w	r3, r3, #8
 800200c:	2b08      	cmp	r3, #8
 800200e:	d101      	bne.n	8002014 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002010:	2301      	movs	r3, #1
 8002012:	e000      	b.n	8002016 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr

0800201e <LL_RCC_MSI_GetRange>:
{
 800201e:	b480      	push	{r7}
 8002020:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800202c:	4618      	mov	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr

08002034 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800203c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002040:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002044:	4618      	mov	r0, r3
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr

0800204c <LL_RCC_MSI_SetCalibTrimming>:
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	021b      	lsls	r3, r3, #8
 8002062:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002066:	4313      	orrs	r3, r2
 8002068:	604b      	str	r3, [r1, #4]
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr

08002074 <LL_RCC_SetSysClkSource>:
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800207c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f023 0203 	bic.w	r2, r3, #3
 8002086:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4313      	orrs	r3, r2
 800208e:	608b      	str	r3, [r1, #8]
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr

0800209a <LL_RCC_GetSysClkSource>:
{
 800209a:	b480      	push	{r7}
 800209c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800209e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f003 030c 	and.w	r3, r3, #12
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr

080020b0 <LL_RCC_SetAHBPrescaler>:
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80020b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	608b      	str	r3, [r1, #8]
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr

080020d6 <LL_RCC_SetAHB3Prescaler>:
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80020de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80020e6:	f023 020f 	bic.w	r2, r3, #15
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	091b      	lsrs	r3, r3, #4
 80020ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020f2:	4313      	orrs	r3, r2
 80020f4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr

08002102 <LL_RCC_SetAPB1Prescaler>:
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800210a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002114:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4313      	orrs	r3, r2
 800211c:	608b      	str	r3, [r1, #8]
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr

08002128 <LL_RCC_SetAPB2Prescaler>:
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800213a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4313      	orrs	r3, r2
 8002142:	608b      	str	r3, [r1, #8]
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	bc80      	pop	{r7}
 800214c:	4770      	bx	lr

0800214e <LL_RCC_GetAHBPrescaler>:
{
 800214e:	b480      	push	{r7}
 8002150:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002152:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800215c:	4618      	mov	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr

08002164 <LL_RCC_GetAHB3Prescaler>:
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800216c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002170:	011b      	lsls	r3, r3, #4
 8002172:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002176:	4618      	mov	r0, r3
 8002178:	46bd      	mov	sp, r7
 800217a:	bc80      	pop	{r7}
 800217c:	4770      	bx	lr

0800217e <LL_RCC_GetAPB1Prescaler>:
{
 800217e:	b480      	push	{r7}
 8002180:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800218c:	4618      	mov	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr

08002194 <LL_RCC_GetAPB2Prescaler>:
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr

080021aa <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80021ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021bc:	6013      	str	r3, [r2, #0]
}
 80021be:	bf00      	nop
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr

080021c6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80021c6:	b480      	push	{r7}
 80021c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80021ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021d8:	6013      	str	r3, [r2, #0]
}
 80021da:	bf00      	nop
 80021dc:	46bd      	mov	sp, r7
 80021de:	bc80      	pop	{r7}
 80021e0:	4770      	bx	lr

080021e2 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80021e2:	b480      	push	{r7}
 80021e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80021e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021f4:	d101      	bne.n	80021fa <LL_RCC_PLL_IsReady+0x18>
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <LL_RCC_PLL_IsReady+0x1a>
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr

08002204 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	0a1b      	lsrs	r3, r3, #8
 8002210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002214:	4618      	mov	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr

0800221c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800222a:	4618      	mov	r0, r3
 800222c:	46bd      	mov	sp, r7
 800222e:	bc80      	pop	{r7}
 8002230:	4770      	bx	lr

08002232 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002240:	4618      	mov	r0, r3
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr

08002248 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800224c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	f003 0303 	and.w	r3, r3, #3
}
 8002256:	4618      	mov	r0, r3
 8002258:	46bd      	mov	sp, r7
 800225a:	bc80      	pop	{r7}
 800225c:	4770      	bx	lr

0800225e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800225e:	b480      	push	{r7}
 8002260:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800226c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002270:	d101      	bne.n	8002276 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002272:	2301      	movs	r3, #1
 8002274:	e000      	b.n	8002278 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr

08002280 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002288:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800228c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002294:	d101      	bne.n	800229a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr

080022a4 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80022a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80022b6:	d101      	bne.n	80022bc <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80022b8:	2301      	movs	r3, #1
 80022ba:	e000      	b.n	80022be <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bc80      	pop	{r7}
 80022c4:	4770      	bx	lr

080022c6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80022c6:	b480      	push	{r7}
 80022c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80022ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80022d8:	d101      	bne.n	80022de <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80022da:	2301      	movs	r3, #1
 80022dc:	e000      	b.n	80022e0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr

080022e8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b088      	sub	sp, #32
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e38b      	b.n	8002a12 <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022fa:	f7ff fece 	bl	800209a <LL_RCC_GetSysClkSource>
 80022fe:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002300:	f7ff ffa2 	bl	8002248 <LL_RCC_PLL_GetMainSource>
 8002304:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0320 	and.w	r3, r3, #32
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 80c9 	beq.w	80024a6 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d005      	beq.n	8002326 <HAL_RCC_OscConfig+0x3e>
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	2b0c      	cmp	r3, #12
 800231e:	d17b      	bne.n	8002418 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d178      	bne.n	8002418 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002326:	f7ff fe5a 	bl	8001fde <LL_RCC_MSI_IsReady>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d005      	beq.n	800233c <HAL_RCC_OscConfig+0x54>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e36a      	b.n	8002a12 <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	2b00      	cmp	r3, #0
 800234c:	d005      	beq.n	800235a <HAL_RCC_OscConfig+0x72>
 800234e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002358:	e006      	b.n	8002368 <HAL_RCC_OscConfig+0x80>
 800235a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800235e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002362:	091b      	lsrs	r3, r3, #4
 8002364:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002368:	4293      	cmp	r3, r2
 800236a:	d222      	bcs.n	80023b2 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002370:	4618      	mov	r0, r3
 8002372:	f000 fd51 	bl	8002e18 <RCC_SetFlashLatencyFromMSIRange>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e348      	b.n	8002a12 <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800238a:	f043 0308 	orr.w	r3, r3, #8
 800238e:	6013      	str	r3, [r2, #0]
 8002390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023a2:	4313      	orrs	r3, r2
 80023a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff fe4e 	bl	800204c <LL_RCC_MSI_SetCalibTrimming>
 80023b0:	e021      	b.n	80023f6 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023bc:	f043 0308 	orr.w	r3, r3, #8
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023d4:	4313      	orrs	r3, r2
 80023d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff fe35 	bl	800204c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 fd16 	bl	8002e18 <RCC_SetFlashLatencyFromMSIRange>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e30d      	b.n	8002a12 <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80023f6:	f000 fcd7 	bl	8002da8 <HAL_RCC_GetHCLKFreq>
 80023fa:	4603      	mov	r3, r0
 80023fc:	4aa1      	ldr	r2, [pc, #644]	; (8002684 <HAL_RCC_OscConfig+0x39c>)
 80023fe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002400:	4ba1      	ldr	r3, [pc, #644]	; (8002688 <HAL_RCC_OscConfig+0x3a0>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe fd53 	bl	8000eb0 <HAL_InitTick>
 800240a:	4603      	mov	r3, r0
 800240c:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800240e:	7cfb      	ldrb	r3, [r7, #19]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d047      	beq.n	80024a4 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8002414:	7cfb      	ldrb	r3, [r7, #19]
 8002416:	e2fc      	b.n	8002a12 <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d02c      	beq.n	800247a <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002420:	f7ff fdc1 	bl	8001fa6 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002424:	f7fe fd90 	bl	8000f48 <HAL_GetTick>
 8002428:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800242c:	f7fe fd8c 	bl	8000f48 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e2e9      	b.n	8002a12 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 800243e:	f7ff fdce 	bl	8001fde <LL_RCC_MSI_IsReady>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0f1      	beq.n	800242c <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002452:	f043 0308 	orr.w	r3, r3, #8
 8002456:	6013      	str	r3, [r2, #0]
 8002458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002466:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800246a:	4313      	orrs	r3, r2
 800246c:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff fdea 	bl	800204c <LL_RCC_MSI_SetCalibTrimming>
 8002478:	e015      	b.n	80024a6 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800247a:	f7ff fda2 	bl	8001fc2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800247e:	f7fe fd63 	bl	8000f48 <HAL_GetTick>
 8002482:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002486:	f7fe fd5f 	bl	8000f48 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e2bc      	b.n	8002a12 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002498:	f7ff fda1 	bl	8001fde <LL_RCC_MSI_IsReady>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1f1      	bne.n	8002486 <HAL_RCC_OscConfig+0x19e>
 80024a2:	e000      	b.n	80024a6 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024a4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d05f      	beq.n	8002572 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	2b08      	cmp	r3, #8
 80024b6:	d005      	beq.n	80024c4 <HAL_RCC_OscConfig+0x1dc>
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	2b0c      	cmp	r3, #12
 80024bc:	d10d      	bne.n	80024da <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	2b03      	cmp	r3, #3
 80024c2:	d10a      	bne.n	80024da <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c4:	f7ff fcdb 	bl	8001e7e <LL_RCC_HSE_IsReady>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d050      	beq.n	8002570 <HAL_RCC_OscConfig+0x288>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d14c      	bne.n	8002570 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e29b      	b.n	8002a12 <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80024da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024ec:	4313      	orrs	r3, r2
 80024ee:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f8:	d102      	bne.n	8002500 <HAL_RCC_OscConfig+0x218>
 80024fa:	f7ff fca4 	bl	8001e46 <LL_RCC_HSE_Enable>
 80024fe:	e00d      	b.n	800251c <HAL_RCC_OscConfig+0x234>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002508:	d104      	bne.n	8002514 <HAL_RCC_OscConfig+0x22c>
 800250a:	f7ff fc6f 	bl	8001dec <LL_RCC_HSE_EnableTcxo>
 800250e:	f7ff fc9a 	bl	8001e46 <LL_RCC_HSE_Enable>
 8002512:	e003      	b.n	800251c <HAL_RCC_OscConfig+0x234>
 8002514:	f7ff fca5 	bl	8001e62 <LL_RCC_HSE_Disable>
 8002518:	f7ff fc76 	bl	8001e08 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d012      	beq.n	800254a <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002524:	f7fe fd10 	bl	8000f48 <HAL_GetTick>
 8002528:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800252c:	f7fe fd0c 	bl	8000f48 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b64      	cmp	r3, #100	; 0x64
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e269      	b.n	8002a12 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 800253e:	f7ff fc9e 	bl	8001e7e <LL_RCC_HSE_IsReady>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0f1      	beq.n	800252c <HAL_RCC_OscConfig+0x244>
 8002548:	e013      	b.n	8002572 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254a:	f7fe fcfd 	bl	8000f48 <HAL_GetTick>
 800254e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002552:	f7fe fcf9 	bl	8000f48 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b64      	cmp	r3, #100	; 0x64
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e256      	b.n	8002a12 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002564:	f7ff fc8b 	bl	8001e7e <LL_RCC_HSE_IsReady>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f1      	bne.n	8002552 <HAL_RCC_OscConfig+0x26a>
 800256e:	e000      	b.n	8002572 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002570:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d04b      	beq.n	8002616 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	2b04      	cmp	r3, #4
 8002582:	d005      	beq.n	8002590 <HAL_RCC_OscConfig+0x2a8>
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	2b0c      	cmp	r3, #12
 8002588:	d113      	bne.n	80025b2 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	2b02      	cmp	r3, #2
 800258e:	d110      	bne.n	80025b2 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002590:	f7ff fca2 	bl	8001ed8 <LL_RCC_HSI_IsReady>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d005      	beq.n	80025a6 <HAL_RCC_OscConfig+0x2be>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e235      	b.n	8002a12 <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff fca5 	bl	8001efa <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025b0:	e031      	b.n	8002616 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d019      	beq.n	80025ee <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025ba:	f7ff fc71 	bl	8001ea0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025be:	f7fe fcc3 	bl	8000f48 <HAL_GetTick>
 80025c2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025c6:	f7fe fcbf 	bl	8000f48 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e21c      	b.n	8002a12 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 80025d8:	f7ff fc7e 	bl	8001ed8 <LL_RCC_HSI_IsReady>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0f1      	beq.n	80025c6 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff fc87 	bl	8001efa <LL_RCC_HSI_SetCalibTrimming>
 80025ec:	e013      	b.n	8002616 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ee:	f7ff fc65 	bl	8001ebc <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f2:	f7fe fca9 	bl	8000f48 <HAL_GetTick>
 80025f6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025fa:	f7fe fca5 	bl	8000f48 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e202      	b.n	8002a12 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 800260c:	f7ff fc64 	bl	8001ed8 <LL_RCC_HSI_IsReady>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f1      	bne.n	80025fa <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0308 	and.w	r3, r3, #8
 800261e:	2b00      	cmp	r3, #0
 8002620:	d06f      	beq.n	8002702 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d057      	beq.n	80026da <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 800262a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800262e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002632:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	69da      	ldr	r2, [r3, #28]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f003 0310 	and.w	r3, r3, #16
 800263e:	429a      	cmp	r2, r3
 8002640:	d036      	beq.n	80026b0 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d006      	beq.n	800265a <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e1db      	b.n	8002a12 <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b00      	cmp	r3, #0
 8002662:	d018      	beq.n	8002696 <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 8002664:	f7ff fc7e 	bl	8001f64 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002668:	f7fe fc6e 	bl	8000f48 <HAL_GetTick>
 800266c:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800266e:	e00d      	b.n	800268c <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002670:	f7fe fc6a 	bl	8000f48 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b11      	cmp	r3, #17
 800267c:	d906      	bls.n	800268c <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e1c7      	b.n	8002a12 <HAL_RCC_OscConfig+0x72a>
 8002682:	bf00      	nop
 8002684:	20000000 	.word	0x20000000
 8002688:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 800268c:	f7ff fc7a 	bl	8001f84 <LL_RCC_LSI_IsReady>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1ec      	bne.n	8002670 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800269a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800269e:	f023 0210 	bic.w	r2, r3, #16
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026aa:	4313      	orrs	r3, r2
 80026ac:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026b0:	f7ff fc48 	bl	8001f44 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b4:	f7fe fc48 	bl	8000f48 <HAL_GetTick>
 80026b8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026bc:	f7fe fc44 	bl	8000f48 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b11      	cmp	r3, #17
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e1a1      	b.n	8002a12 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 80026ce:	f7ff fc59 	bl	8001f84 <LL_RCC_LSI_IsReady>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0f1      	beq.n	80026bc <HAL_RCC_OscConfig+0x3d4>
 80026d8:	e013      	b.n	8002702 <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026da:	f7ff fc43 	bl	8001f64 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026de:	f7fe fc33 	bl	8000f48 <HAL_GetTick>
 80026e2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026e6:	f7fe fc2f 	bl	8000f48 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b11      	cmp	r3, #17
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e18c      	b.n	8002a12 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 80026f8:	f7ff fc44 	bl	8001f84 <LL_RCC_LSI_IsReady>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1f1      	bne.n	80026e6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0304 	and.w	r3, r3, #4
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 80d8 	beq.w	80028c0 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002710:	f7ff fb5a 	bl	8001dc8 <LL_PWR_IsEnabledBkUpAccess>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d113      	bne.n	8002742 <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800271a:	f7ff fb3b 	bl	8001d94 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800271e:	f7fe fc13 	bl	8000f48 <HAL_GetTick>
 8002722:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002726:	f7fe fc0f 	bl	8000f48 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e16c      	b.n	8002a12 <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002738:	f7ff fb46 	bl	8001dc8 <LL_PWR_IsEnabledBkUpAccess>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0f1      	beq.n	8002726 <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d07b      	beq.n	8002842 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	2b85      	cmp	r3, #133	; 0x85
 8002750:	d003      	beq.n	800275a <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	2b05      	cmp	r3, #5
 8002758:	d109      	bne.n	800276e <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800275a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800275e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002762:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002766:	f043 0304 	orr.w	r3, r3, #4
 800276a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276e:	f7fe fbeb 	bl	8000f48 <HAL_GetTick>
 8002772:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800277c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002788:	e00a      	b.n	80027a0 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800278a:	f7fe fbdd 	bl	8000f48 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	f241 3288 	movw	r2, #5000	; 0x1388
 8002798:	4293      	cmp	r3, r2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e138      	b.n	8002a12 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 80027a0:	f7ff fbbf 	bl	8001f22 <LL_RCC_LSE_IsReady>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0ef      	beq.n	800278a <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	2b81      	cmp	r3, #129	; 0x81
 80027b0:	d003      	beq.n	80027ba <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	2b85      	cmp	r3, #133	; 0x85
 80027b8:	d121      	bne.n	80027fe <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ba:	f7fe fbc5 	bl	8000f48 <HAL_GetTick>
 80027be:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80027c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80027d4:	e00a      	b.n	80027ec <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d6:	f7fe fbb7 	bl	8000f48 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e112      	b.n	8002a12 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80027ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0ec      	beq.n	80027d6 <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80027fc:	e060      	b.n	80028c0 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fe:	f7fe fba3 	bl	8000f48 <HAL_GetTick>
 8002802:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800280c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002810:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002814:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002818:	e00a      	b.n	8002830 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800281a:	f7fe fb95 	bl	8000f48 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	f241 3288 	movw	r2, #5000	; 0x1388
 8002828:	4293      	cmp	r3, r2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e0f0      	b.n	8002a12 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002838:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1ec      	bne.n	800281a <HAL_RCC_OscConfig+0x532>
 8002840:	e03e      	b.n	80028c0 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002842:	f7fe fb81 	bl	8000f48 <HAL_GetTick>
 8002846:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800284c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002850:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002854:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800285c:	e00a      	b.n	8002874 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285e:	f7fe fb73 	bl	8000f48 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	f241 3288 	movw	r2, #5000	; 0x1388
 800286c:	4293      	cmp	r3, r2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e0ce      	b.n	8002a12 <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1ec      	bne.n	800285e <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002884:	f7fe fb60 	bl	8000f48 <HAL_GetTick>
 8002888:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800288a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800288e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002892:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002896:	f023 0301 	bic.w	r3, r3, #1
 800289a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800289e:	e00a      	b.n	80028b6 <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a0:	f7fe fb52 	bl	8000f48 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e0ad      	b.n	8002a12 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 80028b6:	f7ff fb34 	bl	8001f22 <LL_RCC_LSE_IsReady>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1ef      	bne.n	80028a0 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 80a3 	beq.w	8002a10 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	2b0c      	cmp	r3, #12
 80028ce:	d076      	beq.n	80029be <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d14b      	bne.n	8002970 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d8:	f7ff fc75 	bl	80021c6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028dc:	f7fe fb34 	bl	8000f48 <HAL_GetTick>
 80028e0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e4:	f7fe fb30 	bl	8000f48 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b0a      	cmp	r3, #10
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e08d      	b.n	8002a12 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 80028f6:	f7ff fc74 	bl	80021e2 <LL_RCC_PLL_IsReady>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1f1      	bne.n	80028e4 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002900:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002904:	68da      	ldr	r2, [r3, #12]
 8002906:	4b45      	ldr	r3, [pc, #276]	; (8002a1c <HAL_RCC_OscConfig+0x734>)
 8002908:	4013      	ands	r3, r2
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002912:	4311      	orrs	r1, r2
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002918:	0212      	lsls	r2, r2, #8
 800291a:	4311      	orrs	r1, r2
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002920:	4311      	orrs	r1, r2
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002926:	4311      	orrs	r1, r2
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800292c:	430a      	orrs	r2, r1
 800292e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002932:	4313      	orrs	r3, r2
 8002934:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002936:	f7ff fc38 	bl	80021aa <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800293a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002948:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294a:	f7fe fafd 	bl	8000f48 <HAL_GetTick>
 800294e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002952:	f7fe faf9 	bl	8000f48 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b0a      	cmp	r3, #10
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e056      	b.n	8002a12 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002964:	f7ff fc3d 	bl	80021e2 <LL_RCC_PLL_IsReady>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0f1      	beq.n	8002952 <HAL_RCC_OscConfig+0x66a>
 800296e:	e04f      	b.n	8002a10 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002970:	f7ff fc29 	bl	80021c6 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800297e:	f023 0303 	bic.w	r3, r3, #3
 8002982:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8002984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800298e:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002996:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002998:	f7fe fad6 	bl	8000f48 <HAL_GetTick>
 800299c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a0:	f7fe fad2 	bl	8000f48 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b0a      	cmp	r3, #10
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e02f      	b.n	8002a12 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 80029b2:	f7ff fc16 	bl	80021e2 <LL_RCC_PLL_IsReady>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1f1      	bne.n	80029a0 <HAL_RCC_OscConfig+0x6b8>
 80029bc:	e028      	b.n	8002a10 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d101      	bne.n	80029ca <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e023      	b.n	8002a12 <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	f003 0203 	and.w	r2, r3, #3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029dc:	429a      	cmp	r2, r3
 80029de:	d115      	bne.n	8002a0c <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d10e      	bne.n	8002a0c <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f8:	021b      	lsls	r3, r3, #8
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d106      	bne.n	8002a0c <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d001      	beq.n	8002a10 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e000      	b.n	8002a12 <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3720      	adds	r7, #32
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	11c1808c 	.word	0x11c1808c

08002a20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e10f      	b.n	8002c54 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a34:	4b89      	ldr	r3, [pc, #548]	; (8002c5c <HAL_RCC_ClockConfig+0x23c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d91b      	bls.n	8002a7a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a42:	4b86      	ldr	r3, [pc, #536]	; (8002c5c <HAL_RCC_ClockConfig+0x23c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f023 0207 	bic.w	r2, r3, #7
 8002a4a:	4984      	ldr	r1, [pc, #528]	; (8002c5c <HAL_RCC_ClockConfig+0x23c>)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a52:	f7fe fa79 	bl	8000f48 <HAL_GetTick>
 8002a56:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a58:	e008      	b.n	8002a6c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002a5a:	f7fe fa75 	bl	8000f48 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e0f3      	b.n	8002c54 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6c:	4b7b      	ldr	r3, [pc, #492]	; (8002c5c <HAL_RCC_ClockConfig+0x23c>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d1ef      	bne.n	8002a5a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d016      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff fb10 	bl	80020b0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a90:	f7fe fa5a 	bl	8000f48 <HAL_GetTick>
 8002a94:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a98:	f7fe fa56 	bl	8000f48 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e0d4      	b.n	8002c54 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002aaa:	f7ff fbd8 	bl	800225e <LL_RCC_IsActiveFlag_HPRE>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0f1      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d016      	beq.n	8002aee <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff fb06 	bl	80020d6 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002aca:	f7fe fa3d 	bl	8000f48 <HAL_GetTick>
 8002ace:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002ad0:	e008      	b.n	8002ae4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002ad2:	f7fe fa39 	bl	8000f48 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e0b7      	b.n	8002c54 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002ae4:	f7ff fbcc 	bl	8002280 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d0f1      	beq.n	8002ad2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0304 	and.w	r3, r3, #4
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d016      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff faff 	bl	8002102 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002b04:	f7fe fa20 	bl	8000f48 <HAL_GetTick>
 8002b08:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002b0c:	f7fe fa1c 	bl	8000f48 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e09a      	b.n	8002c54 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002b1e:	f7ff fbc1 	bl	80022a4 <LL_RCC_IsActiveFlag_PPRE1>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0f1      	beq.n	8002b0c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0308 	and.w	r3, r3, #8
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d017      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7ff faf4 	bl	8002128 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002b40:	f7fe fa02 	bl	8000f48 <HAL_GetTick>
 8002b44:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002b48:	f7fe f9fe 	bl	8000f48 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e07c      	b.n	8002c54 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002b5a:	f7ff fbb4 	bl	80022c6 <LL_RCC_IsActiveFlag_PPRE2>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0f1      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d043      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d106      	bne.n	8002b86 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002b78:	f7ff f981 	bl	8001e7e <LL_RCC_HSE_IsReady>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d11e      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e066      	b.n	8002c54 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b03      	cmp	r3, #3
 8002b8c:	d106      	bne.n	8002b9c <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002b8e:	f7ff fb28 	bl	80021e2 <LL_RCC_PLL_IsReady>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d113      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e05b      	b.n	8002c54 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d106      	bne.n	8002bb2 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002ba4:	f7ff fa1b 	bl	8001fde <LL_RCC_MSI_IsReady>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d108      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e050      	b.n	8002c54 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002bb2:	f7ff f991 	bl	8001ed8 <LL_RCC_HSI_IsReady>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e049      	b.n	8002c54 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff fa55 	bl	8002074 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bca:	f7fe f9bd 	bl	8000f48 <HAL_GetTick>
 8002bce:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd0:	e00a      	b.n	8002be8 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd2:	f7fe f9b9 	bl	8000f48 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e035      	b.n	8002c54 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be8:	f7ff fa57 	bl	800209a <LL_RCC_GetSysClkSource>
 8002bec:	4602      	mov	r2, r0
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d1ec      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bf8:	4b18      	ldr	r3, [pc, #96]	; (8002c5c <HAL_RCC_ClockConfig+0x23c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d21b      	bcs.n	8002c3e <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c06:	4b15      	ldr	r3, [pc, #84]	; (8002c5c <HAL_RCC_ClockConfig+0x23c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f023 0207 	bic.w	r2, r3, #7
 8002c0e:	4913      	ldr	r1, [pc, #76]	; (8002c5c <HAL_RCC_ClockConfig+0x23c>)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c16:	f7fe f997 	bl	8000f48 <HAL_GetTick>
 8002c1a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1c:	e008      	b.n	8002c30 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002c1e:	f7fe f993 	bl	8000f48 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e011      	b.n	8002c54 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c30:	4b0a      	ldr	r3, [pc, #40]	; (8002c5c <HAL_RCC_ClockConfig+0x23c>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0307 	and.w	r3, r3, #7
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d1ef      	bne.n	8002c1e <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002c3e:	f000 f8b3 	bl	8002da8 <HAL_RCC_GetHCLKFreq>
 8002c42:	4603      	mov	r3, r0
 8002c44:	4a06      	ldr	r2, [pc, #24]	; (8002c60 <HAL_RCC_ClockConfig+0x240>)
 8002c46:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c48:	4b06      	ldr	r3, [pc, #24]	; (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fe f92f 	bl	8000eb0 <HAL_InitTick>
 8002c52:	4603      	mov	r3, r0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	58004000 	.word	0x58004000
 8002c60:	20000000 	.word	0x20000000
 8002c64:	20000004 	.word	0x20000004

08002c68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c68:	b590      	push	{r4, r7, lr}
 8002c6a:	b087      	sub	sp, #28
 8002c6c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002c72:	2300      	movs	r3, #0
 8002c74:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c76:	f7ff fa10 	bl	800209a <LL_RCC_GetSysClkSource>
 8002c7a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c7c:	f7ff fae4 	bl	8002248 <LL_RCC_PLL_GetMainSource>
 8002c80:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d005      	beq.n	8002c94 <HAL_RCC_GetSysClockFreq+0x2c>
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	2b0c      	cmp	r3, #12
 8002c8c:	d139      	bne.n	8002d02 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d136      	bne.n	8002d02 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002c94:	f7ff f9b3 	bl	8001ffe <LL_RCC_MSI_IsEnabledRangeSelect>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d115      	bne.n	8002cca <HAL_RCC_GetSysClockFreq+0x62>
 8002c9e:	f7ff f9ae 	bl	8001ffe <LL_RCC_MSI_IsEnabledRangeSelect>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d106      	bne.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x4e>
 8002ca8:	f7ff f9b9 	bl	800201e <LL_RCC_MSI_GetRange>
 8002cac:	4603      	mov	r3, r0
 8002cae:	0a1b      	lsrs	r3, r3, #8
 8002cb0:	f003 030f 	and.w	r3, r3, #15
 8002cb4:	e005      	b.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x5a>
 8002cb6:	f7ff f9bd 	bl	8002034 <LL_RCC_MSI_GetRangeAfterStandby>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	0a1b      	lsrs	r3, r3, #8
 8002cbe:	f003 030f 	and.w	r3, r3, #15
 8002cc2:	4a36      	ldr	r2, [pc, #216]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x134>)
 8002cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc8:	e014      	b.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x8c>
 8002cca:	f7ff f998 	bl	8001ffe <LL_RCC_MSI_IsEnabledRangeSelect>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d106      	bne.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x7a>
 8002cd4:	f7ff f9a3 	bl	800201e <LL_RCC_MSI_GetRange>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	091b      	lsrs	r3, r3, #4
 8002cdc:	f003 030f 	and.w	r3, r3, #15
 8002ce0:	e005      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x86>
 8002ce2:	f7ff f9a7 	bl	8002034 <LL_RCC_MSI_GetRangeAfterStandby>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	4a2b      	ldr	r2, [pc, #172]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x134>)
 8002cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf4:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d115      	bne.n	8002d28 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002d00:	e012      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	d102      	bne.n	8002d0e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d08:	4b25      	ldr	r3, [pc, #148]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002d0a:	617b      	str	r3, [r7, #20]
 8002d0c:	e00c      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d109      	bne.n	8002d28 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002d14:	f7ff f886 	bl	8001e24 <LL_RCC_HSE_IsEnabledDiv2>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d102      	bne.n	8002d24 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002d1e:	4b20      	ldr	r3, [pc, #128]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002d20:	617b      	str	r3, [r7, #20]
 8002d22:	e001      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002d24:	4b1f      	ldr	r3, [pc, #124]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002d26:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d28:	f7ff f9b7 	bl	800209a <LL_RCC_GetSysClkSource>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b0c      	cmp	r3, #12
 8002d30:	d12f      	bne.n	8002d92 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002d32:	f7ff fa89 	bl	8002248 <LL_RCC_PLL_GetMainSource>
 8002d36:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d003      	beq.n	8002d46 <HAL_RCC_GetSysClockFreq+0xde>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b03      	cmp	r3, #3
 8002d42:	d003      	beq.n	8002d4c <HAL_RCC_GetSysClockFreq+0xe4>
 8002d44:	e00d      	b.n	8002d62 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002d46:	4b16      	ldr	r3, [pc, #88]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002d48:	60fb      	str	r3, [r7, #12]
        break;
 8002d4a:	e00d      	b.n	8002d68 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002d4c:	f7ff f86a 	bl	8001e24 <LL_RCC_HSE_IsEnabledDiv2>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d102      	bne.n	8002d5c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002d56:	4b12      	ldr	r3, [pc, #72]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002d58:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002d5a:	e005      	b.n	8002d68 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002d5c:	4b11      	ldr	r3, [pc, #68]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002d5e:	60fb      	str	r3, [r7, #12]
        break;
 8002d60:	e002      	b.n	8002d68 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	60fb      	str	r3, [r7, #12]
        break;
 8002d66:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002d68:	f7ff fa4c 	bl	8002204 <LL_RCC_PLL_GetN>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	fb03 f402 	mul.w	r4, r3, r2
 8002d74:	f7ff fa5d 	bl	8002232 <LL_RCC_PLL_GetDivider>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	091b      	lsrs	r3, r3, #4
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	fbb4 f4f3 	udiv	r4, r4, r3
 8002d82:	f7ff fa4b 	bl	800221c <LL_RCC_PLL_GetR>
 8002d86:	4603      	mov	r3, r0
 8002d88:	0f5b      	lsrs	r3, r3, #29
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	fbb4 f3f3 	udiv	r3, r4, r3
 8002d90:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002d92:	697b      	ldr	r3, [r7, #20]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	371c      	adds	r7, #28
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd90      	pop	{r4, r7, pc}
 8002d9c:	08004e8c 	.word	0x08004e8c
 8002da0:	00f42400 	.word	0x00f42400
 8002da4:	01e84800 	.word	0x01e84800

08002da8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002da8:	b598      	push	{r3, r4, r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002dac:	f7ff ff5c 	bl	8002c68 <HAL_RCC_GetSysClockFreq>
 8002db0:	4604      	mov	r4, r0
 8002db2:	f7ff f9cc 	bl	800214e <LL_RCC_GetAHBPrescaler>
 8002db6:	4603      	mov	r3, r0
 8002db8:	091b      	lsrs	r3, r3, #4
 8002dba:	f003 030f 	and.w	r3, r3, #15
 8002dbe:	4a03      	ldr	r2, [pc, #12]	; (8002dcc <HAL_RCC_GetHCLKFreq+0x24>)
 8002dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	bd98      	pop	{r3, r4, r7, pc}
 8002dcc:	08004e2c 	.word	0x08004e2c

08002dd0 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dd0:	b598      	push	{r3, r4, r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002dd4:	f7ff ffe8 	bl	8002da8 <HAL_RCC_GetHCLKFreq>
 8002dd8:	4604      	mov	r4, r0
 8002dda:	f7ff f9d0 	bl	800217e <LL_RCC_GetAPB1Prescaler>
 8002dde:	4603      	mov	r3, r0
 8002de0:	0a1b      	lsrs	r3, r3, #8
 8002de2:	4a03      	ldr	r2, [pc, #12]	; (8002df0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002de8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	bd98      	pop	{r3, r4, r7, pc}
 8002df0:	08004e6c 	.word	0x08004e6c

08002df4 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002df4:	b598      	push	{r3, r4, r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002df8:	f7ff ffd6 	bl	8002da8 <HAL_RCC_GetHCLKFreq>
 8002dfc:	4604      	mov	r4, r0
 8002dfe:	f7ff f9c9 	bl	8002194 <LL_RCC_GetAPB2Prescaler>
 8002e02:	4603      	mov	r3, r0
 8002e04:	0adb      	lsrs	r3, r3, #11
 8002e06:	4a03      	ldr	r2, [pc, #12]	; (8002e14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e0c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	bd98      	pop	{r3, r4, r7, pc}
 8002e14:	08004e6c 	.word	0x08004e6c

08002e18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002e18:	b590      	push	{r4, r7, lr}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	091b      	lsrs	r3, r3, #4
 8002e24:	f003 030f 	and.w	r3, r3, #15
 8002e28:	4a10      	ldr	r2, [pc, #64]	; (8002e6c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e2e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002e30:	f7ff f998 	bl	8002164 <LL_RCC_GetAHB3Prescaler>
 8002e34:	4603      	mov	r3, r0
 8002e36:	091b      	lsrs	r3, r3, #4
 8002e38:	f003 030f 	and.w	r3, r3, #15
 8002e3c:	4a0c      	ldr	r2, [pc, #48]	; (8002e70 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e48:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	4a09      	ldr	r2, [pc, #36]	; (8002e74 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e52:	0c9c      	lsrs	r4, r3, #18
 8002e54:	f7fe ffac 	bl	8001db0 <HAL_PWREx_GetVoltageRange>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4620      	mov	r0, r4
 8002e5e:	f000 f80b 	bl	8002e78 <RCC_SetFlashLatency>
 8002e62:	4603      	mov	r3, r0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3714      	adds	r7, #20
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd90      	pop	{r4, r7, pc}
 8002e6c:	08004e8c 	.word	0x08004e8c
 8002e70:	08004e2c 	.word	0x08004e2c
 8002e74:	431bde83 	.word	0x431bde83

08002e78 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08e      	sub	sp, #56	; 0x38
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002e82:	4a3a      	ldr	r2, [pc, #232]	; (8002f6c <RCC_SetFlashLatency+0xf4>)
 8002e84:	f107 0320 	add.w	r3, r7, #32
 8002e88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e8c:	6018      	str	r0, [r3, #0]
 8002e8e:	3304      	adds	r3, #4
 8002e90:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002e92:	4a37      	ldr	r2, [pc, #220]	; (8002f70 <RCC_SetFlashLatency+0xf8>)
 8002e94:	f107 0318 	add.w	r3, r7, #24
 8002e98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e9c:	6018      	str	r0, [r3, #0]
 8002e9e:	3304      	adds	r3, #4
 8002ea0:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002ea2:	4a34      	ldr	r2, [pc, #208]	; (8002f74 <RCC_SetFlashLatency+0xfc>)
 8002ea4:	f107 030c 	add.w	r3, r7, #12
 8002ea8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002eaa:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002eae:	2300      	movs	r3, #0
 8002eb0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eb8:	d11b      	bne.n	8002ef2 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002eba:	2300      	movs	r3, #0
 8002ebc:	633b      	str	r3, [r7, #48]	; 0x30
 8002ebe:	e014      	b.n	8002eea <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	3338      	adds	r3, #56	; 0x38
 8002ec6:	443b      	add	r3, r7
 8002ec8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d807      	bhi.n	8002ee4 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	3338      	adds	r3, #56	; 0x38
 8002eda:	443b      	add	r3, r7
 8002edc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002ee0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002ee2:	e021      	b.n	8002f28 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	633b      	str	r3, [r7, #48]	; 0x30
 8002eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d9e7      	bls.n	8002ec0 <RCC_SetFlashLatency+0x48>
 8002ef0:	e01a      	b.n	8002f28 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ef6:	e014      	b.n	8002f22 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	3338      	adds	r3, #56	; 0x38
 8002efe:	443b      	add	r3, r7
 8002f00:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002f04:	461a      	mov	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d807      	bhi.n	8002f1c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	3338      	adds	r3, #56	; 0x38
 8002f12:	443b      	add	r3, r7
 8002f14:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002f18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f1a:	e005      	b.n	8002f28 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f1e:	3301      	adds	r3, #1
 8002f20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d9e7      	bls.n	8002ef8 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f28:	4b13      	ldr	r3, [pc, #76]	; (8002f78 <RCC_SetFlashLatency+0x100>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f023 0207 	bic.w	r2, r3, #7
 8002f30:	4911      	ldr	r1, [pc, #68]	; (8002f78 <RCC_SetFlashLatency+0x100>)
 8002f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f34:	4313      	orrs	r3, r2
 8002f36:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002f38:	f7fe f806 	bl	8000f48 <HAL_GetTick>
 8002f3c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002f3e:	e008      	b.n	8002f52 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002f40:	f7fe f802 	bl	8000f48 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d901      	bls.n	8002f52 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e007      	b.n	8002f62 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002f52:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <RCC_SetFlashLatency+0x100>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d1ef      	bne.n	8002f40 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3738      	adds	r7, #56	; 0x38
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	08004e10 	.word	0x08004e10
 8002f70:	08004e18 	.word	0x08004e18
 8002f74:	08004e20 	.word	0x08004e20
 8002f78:	58004000 	.word	0x58004000

08002f7c <LL_RCC_LSE_IsReady>:
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d101      	bne.n	8002f94 <LL_RCC_LSE_IsReady+0x18>
 8002f90:	2301      	movs	r3, #1
 8002f92:	e000      	b.n	8002f96 <LL_RCC_LSE_IsReady+0x1a>
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bc80      	pop	{r7}
 8002f9c:	4770      	bx	lr

08002f9e <LL_RCC_SetUSARTClockSource>:
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b083      	sub	sp, #12
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002faa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	0c1b      	lsrs	r3, r3, #16
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	401a      	ands	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bc80      	pop	{r7}
 8002fcc:	4770      	bx	lr

08002fce <LL_RCC_SetI2SClockSource>:
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b083      	sub	sp, #12
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fde:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fe2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bc80      	pop	{r7}
 8002ff6:	4770      	bx	lr

08002ff8 <LL_RCC_SetLPUARTClockSource>:
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003008:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800300c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4313      	orrs	r3, r2
 8003014:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	bc80      	pop	{r7}
 8003020:	4770      	bx	lr

08003022 <LL_RCC_SetI2CClockSource>:
{
 8003022:	b480      	push	{r7}
 8003024:	b083      	sub	sp, #12
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800302a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800302e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	091b      	lsrs	r3, r3, #4
 8003036:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800303a:	43db      	mvns	r3, r3
 800303c:	401a      	ands	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003046:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800304a:	4313      	orrs	r3, r2
 800304c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	bc80      	pop	{r7}
 8003058:	4770      	bx	lr

0800305a <LL_RCC_SetLPTIMClockSource>:
{
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003066:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	0c1b      	lsrs	r3, r3, #16
 800306e:	041b      	lsls	r3, r3, #16
 8003070:	43db      	mvns	r3, r3
 8003072:	401a      	ands	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	041b      	lsls	r3, r3, #16
 8003078:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800307c:	4313      	orrs	r3, r2
 800307e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr

0800308c <LL_RCC_SetRNGClockSource>:
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80030a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bc80      	pop	{r7}
 80030b4:	4770      	bx	lr

080030b6 <LL_RCC_SetADCClockSource>:
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80030be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80030ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	bc80      	pop	{r7}
 80030de:	4770      	bx	lr

080030e0 <LL_RCC_SetRTCClockSource>:
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80030e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	bc80      	pop	{r7}
 8003108:	4770      	bx	lr

0800310a <LL_RCC_GetRTCClockSource>:
{
 800310a:	b480      	push	{r7}
 800310c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800310e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003116:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800311a:	4618      	mov	r0, r3
 800311c:	46bd      	mov	sp, r7
 800311e:	bc80      	pop	{r7}
 8003120:	4770      	bx	lr

08003122 <LL_RCC_ForceBackupDomainReset>:
{
 8003122:	b480      	push	{r7}
 8003124:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800312a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800312e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003132:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003136:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800313a:	bf00      	nop
 800313c:	46bd      	mov	sp, r7
 800313e:	bc80      	pop	{r7}
 8003140:	4770      	bx	lr

08003142 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003142:	b480      	push	{r7}
 8003144:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800314a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003156:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800315a:	bf00      	nop
 800315c:	46bd      	mov	sp, r7
 800315e:	bc80      	pop	{r7}
 8003160:	4770      	bx	lr
	...

08003164 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 800316c:	2300      	movs	r3, #0
 800316e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003170:	2300      	movs	r3, #0
 8003172:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003174:	2300      	movs	r3, #0
 8003176:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d058      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003184:	f7fe fe06 	bl	8001d94 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003188:	f7fd fede 	bl	8000f48 <HAL_GetTick>
 800318c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800318e:	e009      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003190:	f7fd feda 	bl	8000f48 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d902      	bls.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	74fb      	strb	r3, [r7, #19]
        break;
 80031a2:	e006      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80031a4:	4b7b      	ldr	r3, [pc, #492]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031b0:	d1ee      	bne.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80031b2:	7cfb      	ldrb	r3, [r7, #19]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d13c      	bne.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80031b8:	f7ff ffa7 	bl	800310a <LL_RCC_GetRTCClockSource>
 80031bc:	4602      	mov	r2, r0
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d00f      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031d2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031d4:	f7ff ffa5 	bl	8003122 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031d8:	f7ff ffb3 	bl	8003142 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d014      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f0:	f7fd feaa 	bl	8000f48 <HAL_GetTick>
 80031f4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80031f6:	e00b      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031f8:	f7fd fea6 	bl	8000f48 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	f241 3288 	movw	r2, #5000	; 0x1388
 8003206:	4293      	cmp	r3, r2
 8003208:	d902      	bls.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	74fb      	strb	r3, [r7, #19]
            break;
 800320e:	e004      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003210:	f7ff feb4 	bl	8002f7c <LL_RCC_LSE_IsReady>
 8003214:	4603      	mov	r3, r0
 8003216:	2b01      	cmp	r3, #1
 8003218:	d1ee      	bne.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800321a:	7cfb      	ldrb	r3, [r7, #19]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d105      	bne.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff ff5b 	bl	80030e0 <LL_RCC_SetRTCClockSource>
 800322a:	e004      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800322c:	7cfb      	ldrb	r3, [r7, #19]
 800322e:	74bb      	strb	r3, [r7, #18]
 8003230:	e001      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003232:	7cfb      	ldrb	r3, [r7, #19]
 8003234:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d004      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff fea9 	bl	8002f9e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d004      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff fe9e 	bl	8002f9e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0320 	and.w	r3, r3, #32
 800326a:	2b00      	cmp	r3, #0
 800326c:	d004      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff fec0 	bl	8002ff8 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003280:	2b00      	cmp	r3, #0
 8003282:	d004      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff fee6 	bl	800305a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003296:	2b00      	cmp	r3, #0
 8003298:	d004      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff fedb 	bl	800305a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d004      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff fed0 	bl	800305a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d004      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff fea9 	bl	8003022 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d004      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff fe9e 	bl	8003022 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d004      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7ff fe93 	bl	8003022 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0310 	and.w	r3, r3, #16
 8003304:	2b00      	cmp	r3, #0
 8003306:	d011      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff fe5e 	bl	8002fce <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800331a:	d107      	bne.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800331c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003326:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800332a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d010      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333c:	4618      	mov	r0, r3
 800333e:	f7ff fea5 	bl	800308c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	2b00      	cmp	r3, #0
 8003348:	d107      	bne.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800334a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003354:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003358:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d011      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff fea3 	bl	80030b6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003374:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003378:	d107      	bne.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800337a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003388:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800338a:	7cbb      	ldrb	r3, [r7, #18]
}
 800338c:	4618      	mov	r0, r3
 800338e:	3718      	adds	r7, #24
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	58000400 	.word	0x58000400

08003398 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d068      	beq.n	800347c <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d106      	bne.n	80033c4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7fd fbfa 	bl	8000bb8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2202      	movs	r2, #2
 80033c8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80033cc:	4b2e      	ldr	r3, [pc, #184]	; (8003488 <HAL_RTC_Init+0xf0>)
 80033ce:	22ca      	movs	r2, #202	; 0xca
 80033d0:	625a      	str	r2, [r3, #36]	; 0x24
 80033d2:	4b2d      	ldr	r3, [pc, #180]	; (8003488 <HAL_RTC_Init+0xf0>)
 80033d4:	2253      	movs	r2, #83	; 0x53
 80033d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 f87d 	bl	80034d8 <RTC_EnterInitMode>
 80033de:	4603      	mov	r3, r0
 80033e0:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 80033e2:	7bfb      	ldrb	r3, [r7, #15]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d13f      	bne.n	8003468 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80033e8:	4b27      	ldr	r3, [pc, #156]	; (8003488 <HAL_RTC_Init+0xf0>)
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	4a26      	ldr	r2, [pc, #152]	; (8003488 <HAL_RTC_Init+0xf0>)
 80033ee:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80033f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033f6:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80033f8:	4b23      	ldr	r3, [pc, #140]	; (8003488 <HAL_RTC_Init+0xf0>)
 80033fa:	699a      	ldr	r2, [r3, #24]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6859      	ldr	r1, [r3, #4]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	4319      	orrs	r1, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	430b      	orrs	r3, r1
 800340c:	491e      	ldr	r1, [pc, #120]	; (8003488 <HAL_RTC_Init+0xf0>)
 800340e:	4313      	orrs	r3, r2
 8003410:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	041b      	lsls	r3, r3, #16
 800341c:	491a      	ldr	r1, [pc, #104]	; (8003488 <HAL_RTC_Init+0xf0>)
 800341e:	4313      	orrs	r3, r2
 8003420:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8003422:	4b19      	ldr	r3, [pc, #100]	; (8003488 <HAL_RTC_Init+0xf0>)
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003432:	430b      	orrs	r3, r1
 8003434:	4914      	ldr	r1, [pc, #80]	; (8003488 <HAL_RTC_Init+0xf0>)
 8003436:	4313      	orrs	r3, r2
 8003438:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f880 	bl	8003540 <RTC_ExitInitMode>
 8003440:	4603      	mov	r3, r0
 8003442:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8003444:	7bfb      	ldrb	r3, [r7, #15]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10e      	bne.n	8003468 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 800344a:	4b0f      	ldr	r3, [pc, #60]	; (8003488 <HAL_RTC_Init+0xf0>)
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a19      	ldr	r1, [r3, #32]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	4319      	orrs	r1, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	430b      	orrs	r3, r1
 8003462:	4909      	ldr	r1, [pc, #36]	; (8003488 <HAL_RTC_Init+0xf0>)
 8003464:	4313      	orrs	r3, r2
 8003466:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003468:	4b07      	ldr	r3, [pc, #28]	; (8003488 <HAL_RTC_Init+0xf0>)
 800346a:	22ff      	movs	r2, #255	; 0xff
 800346c:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 800346e:	7bfb      	ldrb	r3, [r7, #15]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d103      	bne.n	800347c <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 800347c:	7bfb      	ldrb	r3, [r7, #15]
}
 800347e:	4618      	mov	r0, r3
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	40002800 	.word	0x40002800

0800348c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8003494:	4b0f      	ldr	r3, [pc, #60]	; (80034d4 <HAL_RTC_WaitForSynchro+0x48>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	4a0e      	ldr	r2, [pc, #56]	; (80034d4 <HAL_RTC_WaitForSynchro+0x48>)
 800349a:	f023 0320 	bic.w	r3, r3, #32
 800349e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80034a0:	f7fd fd52 	bl	8000f48 <HAL_GetTick>
 80034a4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80034a6:	e009      	b.n	80034bc <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80034a8:	f7fd fd4e 	bl	8000f48 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034b6:	d901      	bls.n	80034bc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e006      	b.n	80034ca <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80034bc:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <HAL_RTC_WaitForSynchro+0x48>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f003 0320 	and.w	r3, r3, #32
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0ef      	beq.n	80034a8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	40002800 	.word	0x40002800

080034d8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034e0:	2300      	movs	r3, #0
 80034e2:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80034e4:	4b15      	ldr	r3, [pc, #84]	; (800353c <RTC_EnterInitMode+0x64>)
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d120      	bne.n	8003532 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80034f0:	4b12      	ldr	r3, [pc, #72]	; (800353c <RTC_EnterInitMode+0x64>)
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	4a11      	ldr	r2, [pc, #68]	; (800353c <RTC_EnterInitMode+0x64>)
 80034f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034fa:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80034fc:	f7fd fd24 	bl	8000f48 <HAL_GetTick>
 8003500:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003502:	e00d      	b.n	8003520 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003504:	f7fd fd20 	bl	8000f48 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003512:	d905      	bls.n	8003520 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2203      	movs	r2, #3
 800351c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003520:	4b06      	ldr	r3, [pc, #24]	; (800353c <RTC_EnterInitMode+0x64>)
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003528:	2b00      	cmp	r3, #0
 800352a:	d102      	bne.n	8003532 <RTC_EnterInitMode+0x5a>
 800352c:	7bfb      	ldrb	r3, [r7, #15]
 800352e:	2b03      	cmp	r3, #3
 8003530:	d1e8      	bne.n	8003504 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8003532:	7bfb      	ldrb	r3, [r7, #15]
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40002800 	.word	0x40002800

08003540 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003548:	2300      	movs	r3, #0
 800354a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800354c:	4b1a      	ldr	r3, [pc, #104]	; (80035b8 <RTC_ExitInitMode+0x78>)
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	4a19      	ldr	r2, [pc, #100]	; (80035b8 <RTC_ExitInitMode+0x78>)
 8003552:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003556:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003558:	4b17      	ldr	r3, [pc, #92]	; (80035b8 <RTC_ExitInitMode+0x78>)
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	f003 0320 	and.w	r3, r3, #32
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10c      	bne.n	800357e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7ff ff91 	bl	800348c <HAL_RTC_WaitForSynchro>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d01e      	beq.n	80035ae <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2203      	movs	r2, #3
 8003574:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	73fb      	strb	r3, [r7, #15]
 800357c:	e017      	b.n	80035ae <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800357e:	4b0e      	ldr	r3, [pc, #56]	; (80035b8 <RTC_ExitInitMode+0x78>)
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	4a0d      	ldr	r2, [pc, #52]	; (80035b8 <RTC_ExitInitMode+0x78>)
 8003584:	f023 0320 	bic.w	r3, r3, #32
 8003588:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7ff ff7e 	bl	800348c <HAL_RTC_WaitForSynchro>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d005      	beq.n	80035a2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2203      	movs	r2, #3
 800359a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80035a2:	4b05      	ldr	r3, [pc, #20]	; (80035b8 <RTC_ExitInitMode+0x78>)
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	4a04      	ldr	r2, [pc, #16]	; (80035b8 <RTC_ExitInitMode+0x78>)
 80035a8:	f043 0320 	orr.w	r3, r3, #32
 80035ac:	6193      	str	r3, [r2, #24]
  }

  return status;
 80035ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	40002800 	.word	0x40002800

080035bc <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d101      	bne.n	80035d6 <HAL_RTCEx_SetWakeUpTimer+0x1a>
 80035d2:	2302      	movs	r3, #2
 80035d4:	e055      	b.n	8003682 <HAL_RTCEx_SetWakeUpTimer+0xc6>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2202      	movs	r2, #2
 80035e2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80035e6:	4b29      	ldr	r3, [pc, #164]	; (800368c <HAL_RTCEx_SetWakeUpTimer+0xd0>)
 80035e8:	22ca      	movs	r2, #202	; 0xca
 80035ea:	625a      	str	r2, [r3, #36]	; 0x24
 80035ec:	4b27      	ldr	r3, [pc, #156]	; (800368c <HAL_RTCEx_SetWakeUpTimer+0xd0>)
 80035ee:	2253      	movs	r2, #83	; 0x53
 80035f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 80035f2:	4b26      	ldr	r3, [pc, #152]	; (800368c <HAL_RTCEx_SetWakeUpTimer+0xd0>)
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	4a25      	ldr	r2, [pc, #148]	; (800368c <HAL_RTCEx_SetWakeUpTimer+0xd0>)
 80035f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035fc:	6193      	str	r3, [r2, #24]

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80035fe:	4b23      	ldr	r3, [pc, #140]	; (800368c <HAL_RTCEx_SetWakeUpTimer+0xd0>)
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003606:	2b00      	cmp	r3, #0
 8003608:	d11e      	bne.n	8003648 <HAL_RTCEx_SetWakeUpTimer+0x8c>
  {
    tickstart = HAL_GetTick();
 800360a:	f7fd fc9d 	bl	8000f48 <HAL_GetTick>
 800360e:	6178      	str	r0, [r7, #20]
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8003610:	e014      	b.n	800363c <HAL_RTCEx_SetWakeUpTimer+0x80>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003612:	f7fd fc99 	bl	8000f48 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003620:	d90c      	bls.n	800363c <HAL_RTCEx_SetWakeUpTimer+0x80>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003622:	4b1a      	ldr	r3, [pc, #104]	; (800368c <HAL_RTCEx_SetWakeUpTimer+0xd0>)
 8003624:	22ff      	movs	r2, #255	; 0xff
 8003626:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2203      	movs	r2, #3
 800362c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

        return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e022      	b.n	8003682 <HAL_RTCEx_SetWakeUpTimer+0xc6>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 800363c:	4b13      	ldr	r3, [pc, #76]	; (800368c <HAL_RTCEx_SetWakeUpTimer+0xd0>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0e4      	beq.n	8003612 <HAL_RTCEx_SetWakeUpTimer+0x56>
      }
    }
  }

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8003648:	4b10      	ldr	r3, [pc, #64]	; (800368c <HAL_RTCEx_SetWakeUpTimer+0xd0>)
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	f023 0207 	bic.w	r2, r3, #7
 8003650:	490e      	ldr	r1, [pc, #56]	; (800368c <HAL_RTCEx_SetWakeUpTimer+0xd0>)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4313      	orrs	r3, r2
 8003656:	618b      	str	r3, [r1, #24]

  /* Configure the Wakeup Timer counter */
  WRITE_REG(RTC->WUTR, (uint32_t)WakeUpCounter);
 8003658:	4a0c      	ldr	r2, [pc, #48]	; (800368c <HAL_RTCEx_SetWakeUpTimer+0xd0>)
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	6153      	str	r3, [r2, #20]

  /* Enable the Wakeup Timer */
  SET_BIT(RTC->CR, RTC_CR_WUTE);
 800365e:	4b0b      	ldr	r3, [pc, #44]	; (800368c <HAL_RTCEx_SetWakeUpTimer+0xd0>)
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	4a0a      	ldr	r2, [pc, #40]	; (800368c <HAL_RTCEx_SetWakeUpTimer+0xd0>)
 8003664:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003668:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800366a:	4b08      	ldr	r3, [pc, #32]	; (800368c <HAL_RTCEx_SetWakeUpTimer+0xd0>)
 800366c:	22ff      	movs	r2, #255	; 0xff
 800366e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3718      	adds	r7, #24
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	40002800 	.word	0x40002800

08003690 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e0c6      	b.n	8003830 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d108      	bne.n	80036bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036b2:	d009      	beq.n	80036c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	61da      	str	r2, [r3, #28]
 80036ba:	e005      	b.n	80036c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d106      	bne.n	80036e2 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f7fd fa97 	bl	8000c10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2202      	movs	r2, #2
 80036e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036f8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003702:	d902      	bls.n	800370a <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003704:	2300      	movs	r3, #0
 8003706:	60fb      	str	r3, [r7, #12]
 8003708:	e002      	b.n	8003710 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800370a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800370e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003718:	d007      	beq.n	800372a <HAL_SPI_Init+0x9a>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003722:	d002      	beq.n	800372a <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800373a:	431a      	orrs	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	431a      	orrs	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	431a      	orrs	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003758:	431a      	orrs	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800376c:	ea42 0103 	orr.w	r1, r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003774:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	430a      	orrs	r2, r1
 800377e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003784:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003788:	d11b      	bne.n	80037c2 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10b      	bne.n	80037aa <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800379a:	d903      	bls.n	80037a4 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2202      	movs	r2, #2
 80037a0:	631a      	str	r2, [r3, #48]	; 0x30
 80037a2:	e002      	b.n	80037aa <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d107      	bne.n	80037c2 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	0c1b      	lsrs	r3, r3, #16
 80037c8:	f003 0204 	and.w	r2, r3, #4
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	f003 0310 	and.w	r3, r3, #16
 80037d4:	431a      	orrs	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80037e8:	ea42 0103 	orr.w	r1, r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003802:	d105      	bne.n	8003810 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	b292      	uxth	r2, r2
 800380e:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	69da      	ldr	r2, [r3, #28]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800381e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <LL_RCC_GetUSARTClockSource>:
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003844:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	401a      	ands	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	041b      	lsls	r3, r3, #16
 8003850:	4313      	orrs	r3, r2
}
 8003852:	4618      	mov	r0, r3
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	bc80      	pop	{r7}
 800385a:	4770      	bx	lr

0800385c <LL_RCC_GetLPUARTClockSource>:
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003868:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4013      	ands	r3, r2
}
 8003870:	4618      	mov	r0, r3
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	bc80      	pop	{r7}
 8003878:	4770      	bx	lr

0800387a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b082      	sub	sp, #8
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d101      	bne.n	800388c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e042      	b.n	8003912 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003892:	2b00      	cmp	r3, #0
 8003894:	d106      	bne.n	80038a4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7fd fa12 	bl	8000cc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2224      	movs	r2, #36	; 0x24
 80038a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 0201 	bic.w	r2, r2, #1
 80038ba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 f8c3 	bl	8003a48 <UART_SetConfig>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d101      	bne.n	80038cc <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e022      	b.n	8003912 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d002      	beq.n	80038da <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 fb2b 	bl	8003f30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038f8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f042 0201 	orr.w	r2, r2, #1
 8003908:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 fbb1 	bl	8004072 <UART_CheckIdleState>
 8003910:	4603      	mov	r3, r0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b08a      	sub	sp, #40	; 0x28
 800391e:	af02      	add	r7, sp, #8
 8003920:	60f8      	str	r0, [r7, #12]
 8003922:	60b9      	str	r1, [r7, #8]
 8003924:	603b      	str	r3, [r7, #0]
 8003926:	4613      	mov	r3, r2
 8003928:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003930:	2b20      	cmp	r3, #32
 8003932:	f040 8083 	bne.w	8003a3c <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d002      	beq.n	8003942 <HAL_UART_Transmit+0x28>
 800393c:	88fb      	ldrh	r3, [r7, #6]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e07b      	b.n	8003a3e <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800394c:	2b01      	cmp	r3, #1
 800394e:	d101      	bne.n	8003954 <HAL_UART_Transmit+0x3a>
 8003950:	2302      	movs	r3, #2
 8003952:	e074      	b.n	8003a3e <HAL_UART_Transmit+0x124>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2221      	movs	r2, #33	; 0x21
 8003968:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800396c:	f7fd faec 	bl	8000f48 <HAL_GetTick>
 8003970:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	88fa      	ldrh	r2, [r7, #6]
 8003976:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	88fa      	ldrh	r2, [r7, #6]
 800397e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800398a:	d108      	bne.n	800399e <HAL_UART_Transmit+0x84>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d104      	bne.n	800399e <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003994:	2300      	movs	r3, #0
 8003996:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	61bb      	str	r3, [r7, #24]
 800399c:	e003      	b.n	80039a6 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039a2:	2300      	movs	r3, #0
 80039a4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80039ae:	e02c      	b.n	8003a0a <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	2200      	movs	r2, #0
 80039b8:	2180      	movs	r1, #128	; 0x80
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 fba4 	bl	8004108 <UART_WaitOnFlagUntilTimeout>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e039      	b.n	8003a3e <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10b      	bne.n	80039e8 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	881b      	ldrh	r3, [r3, #0]
 80039d4:	461a      	mov	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039de:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	3302      	adds	r3, #2
 80039e4:	61bb      	str	r3, [r7, #24]
 80039e6:	e007      	b.n	80039f8 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	781a      	ldrb	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	3301      	adds	r3, #1
 80039f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1cc      	bne.n	80039b0 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	2140      	movs	r1, #64	; 0x40
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 fb71 	bl	8004108 <UART_WaitOnFlagUntilTimeout>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e006      	b.n	8003a3e <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	e000      	b.n	8003a3e <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003a3c:	2302      	movs	r3, #2
  }
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3720      	adds	r7, #32
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
	...

08003a48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a4c:	b08c      	sub	sp, #48	; 0x30
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a52:	2300      	movs	r3, #0
 8003a54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	431a      	orrs	r2, r3
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	431a      	orrs	r2, r3
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	69db      	ldr	r3, [r3, #28]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	4b94      	ldr	r3, [pc, #592]	; (8003cc8 <UART_SetConfig+0x280>)
 8003a78:	4013      	ands	r3, r2
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	6812      	ldr	r2, [r2, #0]
 8003a7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a80:	430b      	orrs	r3, r1
 8003a82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a89      	ldr	r2, [pc, #548]	; (8003ccc <UART_SetConfig+0x284>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d004      	beq.n	8003ab4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003abe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	6812      	ldr	r2, [r2, #0]
 8003ac6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ac8:	430b      	orrs	r3, r1
 8003aca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad2:	f023 010f 	bic.w	r1, r3, #15
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a7a      	ldr	r2, [pc, #488]	; (8003cd0 <UART_SetConfig+0x288>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d127      	bne.n	8003b3c <UART_SetConfig+0xf4>
 8003aec:	2003      	movs	r0, #3
 8003aee:	f7ff fea3 	bl	8003838 <LL_RCC_GetUSARTClockSource>
 8003af2:	4603      	mov	r3, r0
 8003af4:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8003af8:	2b03      	cmp	r3, #3
 8003afa:	d81b      	bhi.n	8003b34 <UART_SetConfig+0xec>
 8003afc:	a201      	add	r2, pc, #4	; (adr r2, 8003b04 <UART_SetConfig+0xbc>)
 8003afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b02:	bf00      	nop
 8003b04:	08003b15 	.word	0x08003b15
 8003b08:	08003b25 	.word	0x08003b25
 8003b0c:	08003b1d 	.word	0x08003b1d
 8003b10:	08003b2d 	.word	0x08003b2d
 8003b14:	2301      	movs	r3, #1
 8003b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b1a:	e080      	b.n	8003c1e <UART_SetConfig+0x1d6>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b22:	e07c      	b.n	8003c1e <UART_SetConfig+0x1d6>
 8003b24:	2304      	movs	r3, #4
 8003b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b2a:	e078      	b.n	8003c1e <UART_SetConfig+0x1d6>
 8003b2c:	2308      	movs	r3, #8
 8003b2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b32:	e074      	b.n	8003c1e <UART_SetConfig+0x1d6>
 8003b34:	2310      	movs	r3, #16
 8003b36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b3a:	e070      	b.n	8003c1e <UART_SetConfig+0x1d6>
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a64      	ldr	r2, [pc, #400]	; (8003cd4 <UART_SetConfig+0x28c>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d138      	bne.n	8003bb8 <UART_SetConfig+0x170>
 8003b46:	200c      	movs	r0, #12
 8003b48:	f7ff fe76 	bl	8003838 <LL_RCC_GetUSARTClockSource>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8003b52:	2b0c      	cmp	r3, #12
 8003b54:	d82c      	bhi.n	8003bb0 <UART_SetConfig+0x168>
 8003b56:	a201      	add	r2, pc, #4	; (adr r2, 8003b5c <UART_SetConfig+0x114>)
 8003b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5c:	08003b91 	.word	0x08003b91
 8003b60:	08003bb1 	.word	0x08003bb1
 8003b64:	08003bb1 	.word	0x08003bb1
 8003b68:	08003bb1 	.word	0x08003bb1
 8003b6c:	08003ba1 	.word	0x08003ba1
 8003b70:	08003bb1 	.word	0x08003bb1
 8003b74:	08003bb1 	.word	0x08003bb1
 8003b78:	08003bb1 	.word	0x08003bb1
 8003b7c:	08003b99 	.word	0x08003b99
 8003b80:	08003bb1 	.word	0x08003bb1
 8003b84:	08003bb1 	.word	0x08003bb1
 8003b88:	08003bb1 	.word	0x08003bb1
 8003b8c:	08003ba9 	.word	0x08003ba9
 8003b90:	2300      	movs	r3, #0
 8003b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b96:	e042      	b.n	8003c1e <UART_SetConfig+0x1d6>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b9e:	e03e      	b.n	8003c1e <UART_SetConfig+0x1d6>
 8003ba0:	2304      	movs	r3, #4
 8003ba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ba6:	e03a      	b.n	8003c1e <UART_SetConfig+0x1d6>
 8003ba8:	2308      	movs	r3, #8
 8003baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bae:	e036      	b.n	8003c1e <UART_SetConfig+0x1d6>
 8003bb0:	2310      	movs	r3, #16
 8003bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bb6:	e032      	b.n	8003c1e <UART_SetConfig+0x1d6>
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a43      	ldr	r2, [pc, #268]	; (8003ccc <UART_SetConfig+0x284>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d12a      	bne.n	8003c18 <UART_SetConfig+0x1d0>
 8003bc2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003bc6:	f7ff fe49 	bl	800385c <LL_RCC_GetLPUARTClockSource>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bd0:	d01a      	beq.n	8003c08 <UART_SetConfig+0x1c0>
 8003bd2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bd6:	d81b      	bhi.n	8003c10 <UART_SetConfig+0x1c8>
 8003bd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bdc:	d00c      	beq.n	8003bf8 <UART_SetConfig+0x1b0>
 8003bde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003be2:	d815      	bhi.n	8003c10 <UART_SetConfig+0x1c8>
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d003      	beq.n	8003bf0 <UART_SetConfig+0x1a8>
 8003be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bec:	d008      	beq.n	8003c00 <UART_SetConfig+0x1b8>
 8003bee:	e00f      	b.n	8003c10 <UART_SetConfig+0x1c8>
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bf6:	e012      	b.n	8003c1e <UART_SetConfig+0x1d6>
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bfe:	e00e      	b.n	8003c1e <UART_SetConfig+0x1d6>
 8003c00:	2304      	movs	r3, #4
 8003c02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c06:	e00a      	b.n	8003c1e <UART_SetConfig+0x1d6>
 8003c08:	2308      	movs	r3, #8
 8003c0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c0e:	e006      	b.n	8003c1e <UART_SetConfig+0x1d6>
 8003c10:	2310      	movs	r3, #16
 8003c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c16:	e002      	b.n	8003c1e <UART_SetConfig+0x1d6>
 8003c18:	2310      	movs	r3, #16
 8003c1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a2a      	ldr	r2, [pc, #168]	; (8003ccc <UART_SetConfig+0x284>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	f040 80a4 	bne.w	8003d72 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c2e:	2b08      	cmp	r3, #8
 8003c30:	d823      	bhi.n	8003c7a <UART_SetConfig+0x232>
 8003c32:	a201      	add	r2, pc, #4	; (adr r2, 8003c38 <UART_SetConfig+0x1f0>)
 8003c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c38:	08003c5d 	.word	0x08003c5d
 8003c3c:	08003c7b 	.word	0x08003c7b
 8003c40:	08003c65 	.word	0x08003c65
 8003c44:	08003c7b 	.word	0x08003c7b
 8003c48:	08003c6b 	.word	0x08003c6b
 8003c4c:	08003c7b 	.word	0x08003c7b
 8003c50:	08003c7b 	.word	0x08003c7b
 8003c54:	08003c7b 	.word	0x08003c7b
 8003c58:	08003c73 	.word	0x08003c73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c5c:	f7ff f8b8 	bl	8002dd0 <HAL_RCC_GetPCLK1Freq>
 8003c60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c62:	e010      	b.n	8003c86 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c64:	4b1c      	ldr	r3, [pc, #112]	; (8003cd8 <UART_SetConfig+0x290>)
 8003c66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c68:	e00d      	b.n	8003c86 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c6a:	f7fe fffd 	bl	8002c68 <HAL_RCC_GetSysClockFreq>
 8003c6e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c70:	e009      	b.n	8003c86 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c78:	e005      	b.n	8003c86 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003c84:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 8137 	beq.w	8003efc <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	4a12      	ldr	r2, [pc, #72]	; (8003cdc <UART_SetConfig+0x294>)
 8003c94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c98:	461a      	mov	r2, r3
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ca0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	4413      	add	r3, r2
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d305      	bcc.n	8003cbe <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d910      	bls.n	8003ce0 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003cc4:	e11a      	b.n	8003efc <UART_SetConfig+0x4b4>
 8003cc6:	bf00      	nop
 8003cc8:	cfff69f3 	.word	0xcfff69f3
 8003ccc:	40008000 	.word	0x40008000
 8003cd0:	40013800 	.word	0x40013800
 8003cd4:	40004400 	.word	0x40004400
 8003cd8:	00f42400 	.word	0x00f42400
 8003cdc:	08004ecc 	.word	0x08004ecc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	60bb      	str	r3, [r7, #8]
 8003ce6:	60fa      	str	r2, [r7, #12]
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	4a8e      	ldr	r2, [pc, #568]	; (8003f28 <UART_SetConfig+0x4e0>)
 8003cee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	603b      	str	r3, [r7, #0]
 8003cf8:	607a      	str	r2, [r7, #4]
 8003cfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cfe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003d02:	f7fc fa8d 	bl	8000220 <__aeabi_uldivmod>
 8003d06:	4602      	mov	r2, r0
 8003d08:	460b      	mov	r3, r1
 8003d0a:	4610      	mov	r0, r2
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	f04f 0200 	mov.w	r2, #0
 8003d12:	f04f 0300 	mov.w	r3, #0
 8003d16:	020b      	lsls	r3, r1, #8
 8003d18:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003d1c:	0202      	lsls	r2, r0, #8
 8003d1e:	6979      	ldr	r1, [r7, #20]
 8003d20:	6849      	ldr	r1, [r1, #4]
 8003d22:	0849      	lsrs	r1, r1, #1
 8003d24:	2000      	movs	r0, #0
 8003d26:	460c      	mov	r4, r1
 8003d28:	4605      	mov	r5, r0
 8003d2a:	eb12 0804 	adds.w	r8, r2, r4
 8003d2e:	eb43 0905 	adc.w	r9, r3, r5
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	469a      	mov	sl, r3
 8003d3a:	4693      	mov	fp, r2
 8003d3c:	4652      	mov	r2, sl
 8003d3e:	465b      	mov	r3, fp
 8003d40:	4640      	mov	r0, r8
 8003d42:	4649      	mov	r1, r9
 8003d44:	f7fc fa6c 	bl	8000220 <__aeabi_uldivmod>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d50:	6a3b      	ldr	r3, [r7, #32]
 8003d52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d56:	d308      	bcc.n	8003d6a <UART_SetConfig+0x322>
 8003d58:	6a3b      	ldr	r3, [r7, #32]
 8003d5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d5e:	d204      	bcs.n	8003d6a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6a3a      	ldr	r2, [r7, #32]
 8003d66:	60da      	str	r2, [r3, #12]
 8003d68:	e0c8      	b.n	8003efc <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003d70:	e0c4      	b.n	8003efc <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d7a:	d168      	bne.n	8003e4e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8003d7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	d828      	bhi.n	8003dd6 <UART_SetConfig+0x38e>
 8003d84:	a201      	add	r2, pc, #4	; (adr r2, 8003d8c <UART_SetConfig+0x344>)
 8003d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8a:	bf00      	nop
 8003d8c:	08003db1 	.word	0x08003db1
 8003d90:	08003db9 	.word	0x08003db9
 8003d94:	08003dc1 	.word	0x08003dc1
 8003d98:	08003dd7 	.word	0x08003dd7
 8003d9c:	08003dc7 	.word	0x08003dc7
 8003da0:	08003dd7 	.word	0x08003dd7
 8003da4:	08003dd7 	.word	0x08003dd7
 8003da8:	08003dd7 	.word	0x08003dd7
 8003dac:	08003dcf 	.word	0x08003dcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003db0:	f7ff f80e 	bl	8002dd0 <HAL_RCC_GetPCLK1Freq>
 8003db4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003db6:	e014      	b.n	8003de2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003db8:	f7ff f81c 	bl	8002df4 <HAL_RCC_GetPCLK2Freq>
 8003dbc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003dbe:	e010      	b.n	8003de2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dc0:	4b5a      	ldr	r3, [pc, #360]	; (8003f2c <UART_SetConfig+0x4e4>)
 8003dc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003dc4:	e00d      	b.n	8003de2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dc6:	f7fe ff4f 	bl	8002c68 <HAL_RCC_GetSysClockFreq>
 8003dca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003dcc:	e009      	b.n	8003de2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dd2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003dd4:	e005      	b.n	8003de2 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003de0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 8089 	beq.w	8003efc <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dee:	4a4e      	ldr	r2, [pc, #312]	; (8003f28 <UART_SetConfig+0x4e0>)
 8003df0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003df4:	461a      	mov	r2, r3
 8003df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003dfc:	005a      	lsls	r2, r3, #1
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	085b      	lsrs	r3, r3, #1
 8003e04:	441a      	add	r2, r3
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e12:	6a3b      	ldr	r3, [r7, #32]
 8003e14:	2b0f      	cmp	r3, #15
 8003e16:	d916      	bls.n	8003e46 <UART_SetConfig+0x3fe>
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e1e:	d212      	bcs.n	8003e46 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e20:	6a3b      	ldr	r3, [r7, #32]
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	f023 030f 	bic.w	r3, r3, #15
 8003e28:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e2a:	6a3b      	ldr	r3, [r7, #32]
 8003e2c:	085b      	lsrs	r3, r3, #1
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	f003 0307 	and.w	r3, r3, #7
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	8bfb      	ldrh	r3, [r7, #30]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	8bfa      	ldrh	r2, [r7, #30]
 8003e42:	60da      	str	r2, [r3, #12]
 8003e44:	e05a      	b.n	8003efc <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003e4c:	e056      	b.n	8003efc <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e52:	2b08      	cmp	r3, #8
 8003e54:	d827      	bhi.n	8003ea6 <UART_SetConfig+0x45e>
 8003e56:	a201      	add	r2, pc, #4	; (adr r2, 8003e5c <UART_SetConfig+0x414>)
 8003e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5c:	08003e81 	.word	0x08003e81
 8003e60:	08003e89 	.word	0x08003e89
 8003e64:	08003e91 	.word	0x08003e91
 8003e68:	08003ea7 	.word	0x08003ea7
 8003e6c:	08003e97 	.word	0x08003e97
 8003e70:	08003ea7 	.word	0x08003ea7
 8003e74:	08003ea7 	.word	0x08003ea7
 8003e78:	08003ea7 	.word	0x08003ea7
 8003e7c:	08003e9f 	.word	0x08003e9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e80:	f7fe ffa6 	bl	8002dd0 <HAL_RCC_GetPCLK1Freq>
 8003e84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e86:	e014      	b.n	8003eb2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e88:	f7fe ffb4 	bl	8002df4 <HAL_RCC_GetPCLK2Freq>
 8003e8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e8e:	e010      	b.n	8003eb2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e90:	4b26      	ldr	r3, [pc, #152]	; (8003f2c <UART_SetConfig+0x4e4>)
 8003e92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e94:	e00d      	b.n	8003eb2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e96:	f7fe fee7 	bl	8002c68 <HAL_RCC_GetSysClockFreq>
 8003e9a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e9c:	e009      	b.n	8003eb2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ea2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ea4:	e005      	b.n	8003eb2 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003eb0:	bf00      	nop
    }

    if (pclk != 0U)
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d021      	beq.n	8003efc <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	4a1a      	ldr	r2, [pc, #104]	; (8003f28 <UART_SetConfig+0x4e0>)
 8003ebe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec6:	fbb3 f2f2 	udiv	r2, r3, r2
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	085b      	lsrs	r3, r3, #1
 8003ed0:	441a      	add	r2, r3
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	2b0f      	cmp	r3, #15
 8003ee2:	d908      	bls.n	8003ef6 <UART_SetConfig+0x4ae>
 8003ee4:	6a3b      	ldr	r3, [r7, #32]
 8003ee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eea:	d204      	bcs.n	8003ef6 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6a3a      	ldr	r2, [r7, #32]
 8003ef2:	60da      	str	r2, [r3, #12]
 8003ef4:	e002      	b.n	8003efc <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	2200      	movs	r2, #0
 8003f16:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003f18:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3730      	adds	r7, #48	; 0x30
 8003f20:	46bd      	mov	sp, r7
 8003f22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f26:	bf00      	nop
 8003f28:	08004ecc 	.word	0x08004ecc
 8003f2c:	00f42400 	.word	0x00f42400

08003f30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00a      	beq.n	8003f5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00a      	beq.n	8003f7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f80:	f003 0304 	and.w	r3, r3, #4
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00a      	beq.n	8003f9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa2:	f003 0308 	and.w	r3, r3, #8
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00a      	beq.n	8003fc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc4:	f003 0310 	and.w	r3, r3, #16
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00a      	beq.n	8003fe2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe6:	f003 0320 	and.w	r3, r3, #32
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00a      	beq.n	8004004 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400c:	2b00      	cmp	r3, #0
 800400e:	d01a      	beq.n	8004046 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800402e:	d10a      	bne.n	8004046 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	430a      	orrs	r2, r1
 8004066:	605a      	str	r2, [r3, #4]
  }
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	bc80      	pop	{r7}
 8004070:	4770      	bx	lr

08004072 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b086      	sub	sp, #24
 8004076:	af02      	add	r7, sp, #8
 8004078:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004082:	f7fc ff61 	bl	8000f48 <HAL_GetTick>
 8004086:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0308 	and.w	r3, r3, #8
 8004092:	2b08      	cmp	r3, #8
 8004094:	d10e      	bne.n	80040b4 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004096:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 f82f 	bl	8004108 <UART_WaitOnFlagUntilTimeout>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e025      	b.n	8004100 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0304 	and.w	r3, r3, #4
 80040be:	2b04      	cmp	r3, #4
 80040c0:	d10e      	bne.n	80040e0 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 f819 	bl	8004108 <UART_WaitOnFlagUntilTimeout>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e00f      	b.n	8004100 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2220      	movs	r2, #32
 80040e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2220      	movs	r2, #32
 80040ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b09c      	sub	sp, #112	; 0x70
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	603b      	str	r3, [r7, #0]
 8004114:	4613      	mov	r3, r2
 8004116:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004118:	e0a9      	b.n	800426e <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800411a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800411c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004120:	f000 80a5 	beq.w	800426e <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004124:	f7fc ff10 	bl	8000f48 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004130:	429a      	cmp	r2, r3
 8004132:	d302      	bcc.n	800413a <UART_WaitOnFlagUntilTimeout+0x32>
 8004134:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004136:	2b00      	cmp	r3, #0
 8004138:	d140      	bne.n	80041bc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004142:	e853 3f00 	ldrex	r3, [r3]
 8004146:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800414a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800414e:	667b      	str	r3, [r7, #100]	; 0x64
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	461a      	mov	r2, r3
 8004156:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004158:	65fb      	str	r3, [r7, #92]	; 0x5c
 800415a:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800415e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004160:	e841 2300 	strex	r3, r2, [r1]
 8004164:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004166:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1e6      	bne.n	800413a <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3308      	adds	r3, #8
 8004172:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004176:	e853 3f00 	ldrex	r3, [r3]
 800417a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800417c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417e:	f023 0301 	bic.w	r3, r3, #1
 8004182:	663b      	str	r3, [r7, #96]	; 0x60
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	3308      	adds	r3, #8
 800418a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800418c:	64ba      	str	r2, [r7, #72]	; 0x48
 800418e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004190:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004192:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004194:	e841 2300 	strex	r3, r2, [r1]
 8004198:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800419a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1e5      	bne.n	800416c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2220      	movs	r2, #32
 80041ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e069      	b.n	8004290 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0304 	and.w	r3, r3, #4
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d051      	beq.n	800426e <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	69db      	ldr	r3, [r3, #28]
 80041d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041d8:	d149      	bne.n	800426e <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041e2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ec:	e853 3f00 	ldrex	r3, [r3]
 80041f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	461a      	mov	r2, r3
 8004200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004202:	637b      	str	r3, [r7, #52]	; 0x34
 8004204:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004206:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004208:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800420a:	e841 2300 	strex	r3, r2, [r1]
 800420e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1e6      	bne.n	80041e4 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	3308      	adds	r3, #8
 800421c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	e853 3f00 	ldrex	r3, [r3]
 8004224:	613b      	str	r3, [r7, #16]
   return(result);
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	f023 0301 	bic.w	r3, r3, #1
 800422c:	66bb      	str	r3, [r7, #104]	; 0x68
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	3308      	adds	r3, #8
 8004234:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004236:	623a      	str	r2, [r7, #32]
 8004238:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423a:	69f9      	ldr	r1, [r7, #28]
 800423c:	6a3a      	ldr	r2, [r7, #32]
 800423e:	e841 2300 	strex	r3, r2, [r1]
 8004242:	61bb      	str	r3, [r7, #24]
   return(result);
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1e5      	bne.n	8004216 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2220      	movs	r2, #32
 800424e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2220      	movs	r2, #32
 8004256:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2220      	movs	r2, #32
 800425e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e010      	b.n	8004290 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	69da      	ldr	r2, [r3, #28]
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	4013      	ands	r3, r2
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	429a      	cmp	r2, r3
 800427c:	bf0c      	ite	eq
 800427e:	2301      	moveq	r3, #1
 8004280:	2300      	movne	r3, #0
 8004282:	b2db      	uxtb	r3, r3
 8004284:	461a      	mov	r2, r3
 8004286:	79fb      	ldrb	r3, [r7, #7]
 8004288:	429a      	cmp	r2, r3
 800428a:	f43f af46 	beq.w	800411a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3770      	adds	r7, #112	; 0x70
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d101      	bne.n	80042ae <HAL_UARTEx_DisableFifoMode+0x16>
 80042aa:	2302      	movs	r3, #2
 80042ac:	e027      	b.n	80042fe <HAL_UARTEx_DisableFifoMode+0x66>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2224      	movs	r2, #36	; 0x24
 80042ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0201 	bic.w	r2, r2, #1
 80042d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80042dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2220      	movs	r2, #32
 80042f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	bc80      	pop	{r7}
 8004306:	4770      	bx	lr

08004308 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004318:	2b01      	cmp	r3, #1
 800431a:	d101      	bne.n	8004320 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800431c:	2302      	movs	r3, #2
 800431e:	e02d      	b.n	800437c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2224      	movs	r2, #36	; 0x24
 800432c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 0201 	bic.w	r2, r2, #1
 8004346:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	430a      	orrs	r2, r1
 800435a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f84f 	bl	8004400 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2220      	movs	r2, #32
 800436e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004394:	2b01      	cmp	r3, #1
 8004396:	d101      	bne.n	800439c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004398:	2302      	movs	r3, #2
 800439a:	e02d      	b.n	80043f8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2224      	movs	r2, #36	; 0x24
 80043a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 0201 	bic.w	r2, r2, #1
 80043c2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	683a      	ldr	r2, [r7, #0]
 80043d4:	430a      	orrs	r2, r1
 80043d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 f811 	bl	8004400 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2220      	movs	r2, #32
 80043ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800440c:	2b00      	cmp	r3, #0
 800440e:	d108      	bne.n	8004422 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004420:	e031      	b.n	8004486 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004422:	2308      	movs	r3, #8
 8004424:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004426:	2308      	movs	r3, #8
 8004428:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	0e5b      	lsrs	r3, r3, #25
 8004432:	b2db      	uxtb	r3, r3
 8004434:	f003 0307 	and.w	r3, r3, #7
 8004438:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	0f5b      	lsrs	r3, r3, #29
 8004442:	b2db      	uxtb	r3, r3
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800444a:	7bbb      	ldrb	r3, [r7, #14]
 800444c:	7b3a      	ldrb	r2, [r7, #12]
 800444e:	4910      	ldr	r1, [pc, #64]	; (8004490 <UARTEx_SetNbDataToProcess+0x90>)
 8004450:	5c8a      	ldrb	r2, [r1, r2]
 8004452:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004456:	7b3a      	ldrb	r2, [r7, #12]
 8004458:	490e      	ldr	r1, [pc, #56]	; (8004494 <UARTEx_SetNbDataToProcess+0x94>)
 800445a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800445c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004460:	b29a      	uxth	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004468:	7bfb      	ldrb	r3, [r7, #15]
 800446a:	7b7a      	ldrb	r2, [r7, #13]
 800446c:	4908      	ldr	r1, [pc, #32]	; (8004490 <UARTEx_SetNbDataToProcess+0x90>)
 800446e:	5c8a      	ldrb	r2, [r1, r2]
 8004470:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004474:	7b7a      	ldrb	r2, [r7, #13]
 8004476:	4907      	ldr	r1, [pc, #28]	; (8004494 <UARTEx_SetNbDataToProcess+0x94>)
 8004478:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800447a:	fb93 f3f2 	sdiv	r3, r3, r2
 800447e:	b29a      	uxth	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004486:	bf00      	nop
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	bc80      	pop	{r7}
 800448e:	4770      	bx	lr
 8004490:	08004ee4 	.word	0x08004ee4
 8004494:	08004eec 	.word	0x08004eec

08004498 <__errno>:
 8004498:	4b01      	ldr	r3, [pc, #4]	; (80044a0 <__errno+0x8>)
 800449a:	6818      	ldr	r0, [r3, #0]
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	2000000c 	.word	0x2000000c

080044a4 <__libc_init_array>:
 80044a4:	b570      	push	{r4, r5, r6, lr}
 80044a6:	4d0d      	ldr	r5, [pc, #52]	; (80044dc <__libc_init_array+0x38>)
 80044a8:	4c0d      	ldr	r4, [pc, #52]	; (80044e0 <__libc_init_array+0x3c>)
 80044aa:	1b64      	subs	r4, r4, r5
 80044ac:	10a4      	asrs	r4, r4, #2
 80044ae:	2600      	movs	r6, #0
 80044b0:	42a6      	cmp	r6, r4
 80044b2:	d109      	bne.n	80044c8 <__libc_init_array+0x24>
 80044b4:	4d0b      	ldr	r5, [pc, #44]	; (80044e4 <__libc_init_array+0x40>)
 80044b6:	4c0c      	ldr	r4, [pc, #48]	; (80044e8 <__libc_init_array+0x44>)
 80044b8:	f000 fc8c 	bl	8004dd4 <_init>
 80044bc:	1b64      	subs	r4, r4, r5
 80044be:	10a4      	asrs	r4, r4, #2
 80044c0:	2600      	movs	r6, #0
 80044c2:	42a6      	cmp	r6, r4
 80044c4:	d105      	bne.n	80044d2 <__libc_init_array+0x2e>
 80044c6:	bd70      	pop	{r4, r5, r6, pc}
 80044c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80044cc:	4798      	blx	r3
 80044ce:	3601      	adds	r6, #1
 80044d0:	e7ee      	b.n	80044b0 <__libc_init_array+0xc>
 80044d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80044d6:	4798      	blx	r3
 80044d8:	3601      	adds	r6, #1
 80044da:	e7f2      	b.n	80044c2 <__libc_init_array+0x1e>
 80044dc:	08004f30 	.word	0x08004f30
 80044e0:	08004f30 	.word	0x08004f30
 80044e4:	08004f30 	.word	0x08004f30
 80044e8:	08004f34 	.word	0x08004f34

080044ec <memset>:
 80044ec:	4402      	add	r2, r0
 80044ee:	4603      	mov	r3, r0
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d100      	bne.n	80044f6 <memset+0xa>
 80044f4:	4770      	bx	lr
 80044f6:	f803 1b01 	strb.w	r1, [r3], #1
 80044fa:	e7f9      	b.n	80044f0 <memset+0x4>

080044fc <siprintf>:
 80044fc:	b40e      	push	{r1, r2, r3}
 80044fe:	b500      	push	{lr}
 8004500:	b09c      	sub	sp, #112	; 0x70
 8004502:	ab1d      	add	r3, sp, #116	; 0x74
 8004504:	9002      	str	r0, [sp, #8]
 8004506:	9006      	str	r0, [sp, #24]
 8004508:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800450c:	4809      	ldr	r0, [pc, #36]	; (8004534 <siprintf+0x38>)
 800450e:	9107      	str	r1, [sp, #28]
 8004510:	9104      	str	r1, [sp, #16]
 8004512:	4909      	ldr	r1, [pc, #36]	; (8004538 <siprintf+0x3c>)
 8004514:	f853 2b04 	ldr.w	r2, [r3], #4
 8004518:	9105      	str	r1, [sp, #20]
 800451a:	6800      	ldr	r0, [r0, #0]
 800451c:	9301      	str	r3, [sp, #4]
 800451e:	a902      	add	r1, sp, #8
 8004520:	f000 f868 	bl	80045f4 <_svfiprintf_r>
 8004524:	9b02      	ldr	r3, [sp, #8]
 8004526:	2200      	movs	r2, #0
 8004528:	701a      	strb	r2, [r3, #0]
 800452a:	b01c      	add	sp, #112	; 0x70
 800452c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004530:	b003      	add	sp, #12
 8004532:	4770      	bx	lr
 8004534:	2000000c 	.word	0x2000000c
 8004538:	ffff0208 	.word	0xffff0208

0800453c <__ssputs_r>:
 800453c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004540:	688e      	ldr	r6, [r1, #8]
 8004542:	429e      	cmp	r6, r3
 8004544:	4682      	mov	sl, r0
 8004546:	460c      	mov	r4, r1
 8004548:	4690      	mov	r8, r2
 800454a:	461f      	mov	r7, r3
 800454c:	d838      	bhi.n	80045c0 <__ssputs_r+0x84>
 800454e:	898a      	ldrh	r2, [r1, #12]
 8004550:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004554:	d032      	beq.n	80045bc <__ssputs_r+0x80>
 8004556:	6825      	ldr	r5, [r4, #0]
 8004558:	6909      	ldr	r1, [r1, #16]
 800455a:	eba5 0901 	sub.w	r9, r5, r1
 800455e:	6965      	ldr	r5, [r4, #20]
 8004560:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004564:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004568:	3301      	adds	r3, #1
 800456a:	444b      	add	r3, r9
 800456c:	106d      	asrs	r5, r5, #1
 800456e:	429d      	cmp	r5, r3
 8004570:	bf38      	it	cc
 8004572:	461d      	movcc	r5, r3
 8004574:	0553      	lsls	r3, r2, #21
 8004576:	d531      	bpl.n	80045dc <__ssputs_r+0xa0>
 8004578:	4629      	mov	r1, r5
 800457a:	f000 fb61 	bl	8004c40 <_malloc_r>
 800457e:	4606      	mov	r6, r0
 8004580:	b950      	cbnz	r0, 8004598 <__ssputs_r+0x5c>
 8004582:	230c      	movs	r3, #12
 8004584:	f8ca 3000 	str.w	r3, [sl]
 8004588:	89a3      	ldrh	r3, [r4, #12]
 800458a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800458e:	81a3      	strh	r3, [r4, #12]
 8004590:	f04f 30ff 	mov.w	r0, #4294967295
 8004594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004598:	6921      	ldr	r1, [r4, #16]
 800459a:	464a      	mov	r2, r9
 800459c:	f000 fabe 	bl	8004b1c <memcpy>
 80045a0:	89a3      	ldrh	r3, [r4, #12]
 80045a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80045a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045aa:	81a3      	strh	r3, [r4, #12]
 80045ac:	6126      	str	r6, [r4, #16]
 80045ae:	6165      	str	r5, [r4, #20]
 80045b0:	444e      	add	r6, r9
 80045b2:	eba5 0509 	sub.w	r5, r5, r9
 80045b6:	6026      	str	r6, [r4, #0]
 80045b8:	60a5      	str	r5, [r4, #8]
 80045ba:	463e      	mov	r6, r7
 80045bc:	42be      	cmp	r6, r7
 80045be:	d900      	bls.n	80045c2 <__ssputs_r+0x86>
 80045c0:	463e      	mov	r6, r7
 80045c2:	6820      	ldr	r0, [r4, #0]
 80045c4:	4632      	mov	r2, r6
 80045c6:	4641      	mov	r1, r8
 80045c8:	f000 fab6 	bl	8004b38 <memmove>
 80045cc:	68a3      	ldr	r3, [r4, #8]
 80045ce:	1b9b      	subs	r3, r3, r6
 80045d0:	60a3      	str	r3, [r4, #8]
 80045d2:	6823      	ldr	r3, [r4, #0]
 80045d4:	4433      	add	r3, r6
 80045d6:	6023      	str	r3, [r4, #0]
 80045d8:	2000      	movs	r0, #0
 80045da:	e7db      	b.n	8004594 <__ssputs_r+0x58>
 80045dc:	462a      	mov	r2, r5
 80045de:	f000 fba3 	bl	8004d28 <_realloc_r>
 80045e2:	4606      	mov	r6, r0
 80045e4:	2800      	cmp	r0, #0
 80045e6:	d1e1      	bne.n	80045ac <__ssputs_r+0x70>
 80045e8:	6921      	ldr	r1, [r4, #16]
 80045ea:	4650      	mov	r0, sl
 80045ec:	f000 fabe 	bl	8004b6c <_free_r>
 80045f0:	e7c7      	b.n	8004582 <__ssputs_r+0x46>
	...

080045f4 <_svfiprintf_r>:
 80045f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045f8:	4698      	mov	r8, r3
 80045fa:	898b      	ldrh	r3, [r1, #12]
 80045fc:	061b      	lsls	r3, r3, #24
 80045fe:	b09d      	sub	sp, #116	; 0x74
 8004600:	4607      	mov	r7, r0
 8004602:	460d      	mov	r5, r1
 8004604:	4614      	mov	r4, r2
 8004606:	d50e      	bpl.n	8004626 <_svfiprintf_r+0x32>
 8004608:	690b      	ldr	r3, [r1, #16]
 800460a:	b963      	cbnz	r3, 8004626 <_svfiprintf_r+0x32>
 800460c:	2140      	movs	r1, #64	; 0x40
 800460e:	f000 fb17 	bl	8004c40 <_malloc_r>
 8004612:	6028      	str	r0, [r5, #0]
 8004614:	6128      	str	r0, [r5, #16]
 8004616:	b920      	cbnz	r0, 8004622 <_svfiprintf_r+0x2e>
 8004618:	230c      	movs	r3, #12
 800461a:	603b      	str	r3, [r7, #0]
 800461c:	f04f 30ff 	mov.w	r0, #4294967295
 8004620:	e0d1      	b.n	80047c6 <_svfiprintf_r+0x1d2>
 8004622:	2340      	movs	r3, #64	; 0x40
 8004624:	616b      	str	r3, [r5, #20]
 8004626:	2300      	movs	r3, #0
 8004628:	9309      	str	r3, [sp, #36]	; 0x24
 800462a:	2320      	movs	r3, #32
 800462c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004630:	f8cd 800c 	str.w	r8, [sp, #12]
 8004634:	2330      	movs	r3, #48	; 0x30
 8004636:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80047e0 <_svfiprintf_r+0x1ec>
 800463a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800463e:	f04f 0901 	mov.w	r9, #1
 8004642:	4623      	mov	r3, r4
 8004644:	469a      	mov	sl, r3
 8004646:	f813 2b01 	ldrb.w	r2, [r3], #1
 800464a:	b10a      	cbz	r2, 8004650 <_svfiprintf_r+0x5c>
 800464c:	2a25      	cmp	r2, #37	; 0x25
 800464e:	d1f9      	bne.n	8004644 <_svfiprintf_r+0x50>
 8004650:	ebba 0b04 	subs.w	fp, sl, r4
 8004654:	d00b      	beq.n	800466e <_svfiprintf_r+0x7a>
 8004656:	465b      	mov	r3, fp
 8004658:	4622      	mov	r2, r4
 800465a:	4629      	mov	r1, r5
 800465c:	4638      	mov	r0, r7
 800465e:	f7ff ff6d 	bl	800453c <__ssputs_r>
 8004662:	3001      	adds	r0, #1
 8004664:	f000 80aa 	beq.w	80047bc <_svfiprintf_r+0x1c8>
 8004668:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800466a:	445a      	add	r2, fp
 800466c:	9209      	str	r2, [sp, #36]	; 0x24
 800466e:	f89a 3000 	ldrb.w	r3, [sl]
 8004672:	2b00      	cmp	r3, #0
 8004674:	f000 80a2 	beq.w	80047bc <_svfiprintf_r+0x1c8>
 8004678:	2300      	movs	r3, #0
 800467a:	f04f 32ff 	mov.w	r2, #4294967295
 800467e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004682:	f10a 0a01 	add.w	sl, sl, #1
 8004686:	9304      	str	r3, [sp, #16]
 8004688:	9307      	str	r3, [sp, #28]
 800468a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800468e:	931a      	str	r3, [sp, #104]	; 0x68
 8004690:	4654      	mov	r4, sl
 8004692:	2205      	movs	r2, #5
 8004694:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004698:	4851      	ldr	r0, [pc, #324]	; (80047e0 <_svfiprintf_r+0x1ec>)
 800469a:	f7fb fd71 	bl	8000180 <memchr>
 800469e:	9a04      	ldr	r2, [sp, #16]
 80046a0:	b9d8      	cbnz	r0, 80046da <_svfiprintf_r+0xe6>
 80046a2:	06d0      	lsls	r0, r2, #27
 80046a4:	bf44      	itt	mi
 80046a6:	2320      	movmi	r3, #32
 80046a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046ac:	0711      	lsls	r1, r2, #28
 80046ae:	bf44      	itt	mi
 80046b0:	232b      	movmi	r3, #43	; 0x2b
 80046b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046b6:	f89a 3000 	ldrb.w	r3, [sl]
 80046ba:	2b2a      	cmp	r3, #42	; 0x2a
 80046bc:	d015      	beq.n	80046ea <_svfiprintf_r+0xf6>
 80046be:	9a07      	ldr	r2, [sp, #28]
 80046c0:	4654      	mov	r4, sl
 80046c2:	2000      	movs	r0, #0
 80046c4:	f04f 0c0a 	mov.w	ip, #10
 80046c8:	4621      	mov	r1, r4
 80046ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046ce:	3b30      	subs	r3, #48	; 0x30
 80046d0:	2b09      	cmp	r3, #9
 80046d2:	d94e      	bls.n	8004772 <_svfiprintf_r+0x17e>
 80046d4:	b1b0      	cbz	r0, 8004704 <_svfiprintf_r+0x110>
 80046d6:	9207      	str	r2, [sp, #28]
 80046d8:	e014      	b.n	8004704 <_svfiprintf_r+0x110>
 80046da:	eba0 0308 	sub.w	r3, r0, r8
 80046de:	fa09 f303 	lsl.w	r3, r9, r3
 80046e2:	4313      	orrs	r3, r2
 80046e4:	9304      	str	r3, [sp, #16]
 80046e6:	46a2      	mov	sl, r4
 80046e8:	e7d2      	b.n	8004690 <_svfiprintf_r+0x9c>
 80046ea:	9b03      	ldr	r3, [sp, #12]
 80046ec:	1d19      	adds	r1, r3, #4
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	9103      	str	r1, [sp, #12]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	bfbb      	ittet	lt
 80046f6:	425b      	neglt	r3, r3
 80046f8:	f042 0202 	orrlt.w	r2, r2, #2
 80046fc:	9307      	strge	r3, [sp, #28]
 80046fe:	9307      	strlt	r3, [sp, #28]
 8004700:	bfb8      	it	lt
 8004702:	9204      	strlt	r2, [sp, #16]
 8004704:	7823      	ldrb	r3, [r4, #0]
 8004706:	2b2e      	cmp	r3, #46	; 0x2e
 8004708:	d10c      	bne.n	8004724 <_svfiprintf_r+0x130>
 800470a:	7863      	ldrb	r3, [r4, #1]
 800470c:	2b2a      	cmp	r3, #42	; 0x2a
 800470e:	d135      	bne.n	800477c <_svfiprintf_r+0x188>
 8004710:	9b03      	ldr	r3, [sp, #12]
 8004712:	1d1a      	adds	r2, r3, #4
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	9203      	str	r2, [sp, #12]
 8004718:	2b00      	cmp	r3, #0
 800471a:	bfb8      	it	lt
 800471c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004720:	3402      	adds	r4, #2
 8004722:	9305      	str	r3, [sp, #20]
 8004724:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80047e4 <_svfiprintf_r+0x1f0>
 8004728:	7821      	ldrb	r1, [r4, #0]
 800472a:	2203      	movs	r2, #3
 800472c:	4650      	mov	r0, sl
 800472e:	f7fb fd27 	bl	8000180 <memchr>
 8004732:	b140      	cbz	r0, 8004746 <_svfiprintf_r+0x152>
 8004734:	2340      	movs	r3, #64	; 0x40
 8004736:	eba0 000a 	sub.w	r0, r0, sl
 800473a:	fa03 f000 	lsl.w	r0, r3, r0
 800473e:	9b04      	ldr	r3, [sp, #16]
 8004740:	4303      	orrs	r3, r0
 8004742:	3401      	adds	r4, #1
 8004744:	9304      	str	r3, [sp, #16]
 8004746:	f814 1b01 	ldrb.w	r1, [r4], #1
 800474a:	4827      	ldr	r0, [pc, #156]	; (80047e8 <_svfiprintf_r+0x1f4>)
 800474c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004750:	2206      	movs	r2, #6
 8004752:	f7fb fd15 	bl	8000180 <memchr>
 8004756:	2800      	cmp	r0, #0
 8004758:	d038      	beq.n	80047cc <_svfiprintf_r+0x1d8>
 800475a:	4b24      	ldr	r3, [pc, #144]	; (80047ec <_svfiprintf_r+0x1f8>)
 800475c:	bb1b      	cbnz	r3, 80047a6 <_svfiprintf_r+0x1b2>
 800475e:	9b03      	ldr	r3, [sp, #12]
 8004760:	3307      	adds	r3, #7
 8004762:	f023 0307 	bic.w	r3, r3, #7
 8004766:	3308      	adds	r3, #8
 8004768:	9303      	str	r3, [sp, #12]
 800476a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800476c:	4433      	add	r3, r6
 800476e:	9309      	str	r3, [sp, #36]	; 0x24
 8004770:	e767      	b.n	8004642 <_svfiprintf_r+0x4e>
 8004772:	fb0c 3202 	mla	r2, ip, r2, r3
 8004776:	460c      	mov	r4, r1
 8004778:	2001      	movs	r0, #1
 800477a:	e7a5      	b.n	80046c8 <_svfiprintf_r+0xd4>
 800477c:	2300      	movs	r3, #0
 800477e:	3401      	adds	r4, #1
 8004780:	9305      	str	r3, [sp, #20]
 8004782:	4619      	mov	r1, r3
 8004784:	f04f 0c0a 	mov.w	ip, #10
 8004788:	4620      	mov	r0, r4
 800478a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800478e:	3a30      	subs	r2, #48	; 0x30
 8004790:	2a09      	cmp	r2, #9
 8004792:	d903      	bls.n	800479c <_svfiprintf_r+0x1a8>
 8004794:	2b00      	cmp	r3, #0
 8004796:	d0c5      	beq.n	8004724 <_svfiprintf_r+0x130>
 8004798:	9105      	str	r1, [sp, #20]
 800479a:	e7c3      	b.n	8004724 <_svfiprintf_r+0x130>
 800479c:	fb0c 2101 	mla	r1, ip, r1, r2
 80047a0:	4604      	mov	r4, r0
 80047a2:	2301      	movs	r3, #1
 80047a4:	e7f0      	b.n	8004788 <_svfiprintf_r+0x194>
 80047a6:	ab03      	add	r3, sp, #12
 80047a8:	9300      	str	r3, [sp, #0]
 80047aa:	462a      	mov	r2, r5
 80047ac:	4b10      	ldr	r3, [pc, #64]	; (80047f0 <_svfiprintf_r+0x1fc>)
 80047ae:	a904      	add	r1, sp, #16
 80047b0:	4638      	mov	r0, r7
 80047b2:	f3af 8000 	nop.w
 80047b6:	1c42      	adds	r2, r0, #1
 80047b8:	4606      	mov	r6, r0
 80047ba:	d1d6      	bne.n	800476a <_svfiprintf_r+0x176>
 80047bc:	89ab      	ldrh	r3, [r5, #12]
 80047be:	065b      	lsls	r3, r3, #25
 80047c0:	f53f af2c 	bmi.w	800461c <_svfiprintf_r+0x28>
 80047c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047c6:	b01d      	add	sp, #116	; 0x74
 80047c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047cc:	ab03      	add	r3, sp, #12
 80047ce:	9300      	str	r3, [sp, #0]
 80047d0:	462a      	mov	r2, r5
 80047d2:	4b07      	ldr	r3, [pc, #28]	; (80047f0 <_svfiprintf_r+0x1fc>)
 80047d4:	a904      	add	r1, sp, #16
 80047d6:	4638      	mov	r0, r7
 80047d8:	f000 f87a 	bl	80048d0 <_printf_i>
 80047dc:	e7eb      	b.n	80047b6 <_svfiprintf_r+0x1c2>
 80047de:	bf00      	nop
 80047e0:	08004ef4 	.word	0x08004ef4
 80047e4:	08004efa 	.word	0x08004efa
 80047e8:	08004efe 	.word	0x08004efe
 80047ec:	00000000 	.word	0x00000000
 80047f0:	0800453d 	.word	0x0800453d

080047f4 <_printf_common>:
 80047f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047f8:	4616      	mov	r6, r2
 80047fa:	4699      	mov	r9, r3
 80047fc:	688a      	ldr	r2, [r1, #8]
 80047fe:	690b      	ldr	r3, [r1, #16]
 8004800:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004804:	4293      	cmp	r3, r2
 8004806:	bfb8      	it	lt
 8004808:	4613      	movlt	r3, r2
 800480a:	6033      	str	r3, [r6, #0]
 800480c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004810:	4607      	mov	r7, r0
 8004812:	460c      	mov	r4, r1
 8004814:	b10a      	cbz	r2, 800481a <_printf_common+0x26>
 8004816:	3301      	adds	r3, #1
 8004818:	6033      	str	r3, [r6, #0]
 800481a:	6823      	ldr	r3, [r4, #0]
 800481c:	0699      	lsls	r1, r3, #26
 800481e:	bf42      	ittt	mi
 8004820:	6833      	ldrmi	r3, [r6, #0]
 8004822:	3302      	addmi	r3, #2
 8004824:	6033      	strmi	r3, [r6, #0]
 8004826:	6825      	ldr	r5, [r4, #0]
 8004828:	f015 0506 	ands.w	r5, r5, #6
 800482c:	d106      	bne.n	800483c <_printf_common+0x48>
 800482e:	f104 0a19 	add.w	sl, r4, #25
 8004832:	68e3      	ldr	r3, [r4, #12]
 8004834:	6832      	ldr	r2, [r6, #0]
 8004836:	1a9b      	subs	r3, r3, r2
 8004838:	42ab      	cmp	r3, r5
 800483a:	dc26      	bgt.n	800488a <_printf_common+0x96>
 800483c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004840:	1e13      	subs	r3, r2, #0
 8004842:	6822      	ldr	r2, [r4, #0]
 8004844:	bf18      	it	ne
 8004846:	2301      	movne	r3, #1
 8004848:	0692      	lsls	r2, r2, #26
 800484a:	d42b      	bmi.n	80048a4 <_printf_common+0xb0>
 800484c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004850:	4649      	mov	r1, r9
 8004852:	4638      	mov	r0, r7
 8004854:	47c0      	blx	r8
 8004856:	3001      	adds	r0, #1
 8004858:	d01e      	beq.n	8004898 <_printf_common+0xa4>
 800485a:	6823      	ldr	r3, [r4, #0]
 800485c:	68e5      	ldr	r5, [r4, #12]
 800485e:	6832      	ldr	r2, [r6, #0]
 8004860:	f003 0306 	and.w	r3, r3, #6
 8004864:	2b04      	cmp	r3, #4
 8004866:	bf08      	it	eq
 8004868:	1aad      	subeq	r5, r5, r2
 800486a:	68a3      	ldr	r3, [r4, #8]
 800486c:	6922      	ldr	r2, [r4, #16]
 800486e:	bf0c      	ite	eq
 8004870:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004874:	2500      	movne	r5, #0
 8004876:	4293      	cmp	r3, r2
 8004878:	bfc4      	itt	gt
 800487a:	1a9b      	subgt	r3, r3, r2
 800487c:	18ed      	addgt	r5, r5, r3
 800487e:	2600      	movs	r6, #0
 8004880:	341a      	adds	r4, #26
 8004882:	42b5      	cmp	r5, r6
 8004884:	d11a      	bne.n	80048bc <_printf_common+0xc8>
 8004886:	2000      	movs	r0, #0
 8004888:	e008      	b.n	800489c <_printf_common+0xa8>
 800488a:	2301      	movs	r3, #1
 800488c:	4652      	mov	r2, sl
 800488e:	4649      	mov	r1, r9
 8004890:	4638      	mov	r0, r7
 8004892:	47c0      	blx	r8
 8004894:	3001      	adds	r0, #1
 8004896:	d103      	bne.n	80048a0 <_printf_common+0xac>
 8004898:	f04f 30ff 	mov.w	r0, #4294967295
 800489c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048a0:	3501      	adds	r5, #1
 80048a2:	e7c6      	b.n	8004832 <_printf_common+0x3e>
 80048a4:	18e1      	adds	r1, r4, r3
 80048a6:	1c5a      	adds	r2, r3, #1
 80048a8:	2030      	movs	r0, #48	; 0x30
 80048aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048ae:	4422      	add	r2, r4
 80048b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048b8:	3302      	adds	r3, #2
 80048ba:	e7c7      	b.n	800484c <_printf_common+0x58>
 80048bc:	2301      	movs	r3, #1
 80048be:	4622      	mov	r2, r4
 80048c0:	4649      	mov	r1, r9
 80048c2:	4638      	mov	r0, r7
 80048c4:	47c0      	blx	r8
 80048c6:	3001      	adds	r0, #1
 80048c8:	d0e6      	beq.n	8004898 <_printf_common+0xa4>
 80048ca:	3601      	adds	r6, #1
 80048cc:	e7d9      	b.n	8004882 <_printf_common+0x8e>
	...

080048d0 <_printf_i>:
 80048d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048d4:	7e0f      	ldrb	r7, [r1, #24]
 80048d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80048d8:	2f78      	cmp	r7, #120	; 0x78
 80048da:	4691      	mov	r9, r2
 80048dc:	4680      	mov	r8, r0
 80048de:	460c      	mov	r4, r1
 80048e0:	469a      	mov	sl, r3
 80048e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80048e6:	d807      	bhi.n	80048f8 <_printf_i+0x28>
 80048e8:	2f62      	cmp	r7, #98	; 0x62
 80048ea:	d80a      	bhi.n	8004902 <_printf_i+0x32>
 80048ec:	2f00      	cmp	r7, #0
 80048ee:	f000 80d8 	beq.w	8004aa2 <_printf_i+0x1d2>
 80048f2:	2f58      	cmp	r7, #88	; 0x58
 80048f4:	f000 80a3 	beq.w	8004a3e <_printf_i+0x16e>
 80048f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004900:	e03a      	b.n	8004978 <_printf_i+0xa8>
 8004902:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004906:	2b15      	cmp	r3, #21
 8004908:	d8f6      	bhi.n	80048f8 <_printf_i+0x28>
 800490a:	a101      	add	r1, pc, #4	; (adr r1, 8004910 <_printf_i+0x40>)
 800490c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004910:	08004969 	.word	0x08004969
 8004914:	0800497d 	.word	0x0800497d
 8004918:	080048f9 	.word	0x080048f9
 800491c:	080048f9 	.word	0x080048f9
 8004920:	080048f9 	.word	0x080048f9
 8004924:	080048f9 	.word	0x080048f9
 8004928:	0800497d 	.word	0x0800497d
 800492c:	080048f9 	.word	0x080048f9
 8004930:	080048f9 	.word	0x080048f9
 8004934:	080048f9 	.word	0x080048f9
 8004938:	080048f9 	.word	0x080048f9
 800493c:	08004a89 	.word	0x08004a89
 8004940:	080049ad 	.word	0x080049ad
 8004944:	08004a6b 	.word	0x08004a6b
 8004948:	080048f9 	.word	0x080048f9
 800494c:	080048f9 	.word	0x080048f9
 8004950:	08004aab 	.word	0x08004aab
 8004954:	080048f9 	.word	0x080048f9
 8004958:	080049ad 	.word	0x080049ad
 800495c:	080048f9 	.word	0x080048f9
 8004960:	080048f9 	.word	0x080048f9
 8004964:	08004a73 	.word	0x08004a73
 8004968:	682b      	ldr	r3, [r5, #0]
 800496a:	1d1a      	adds	r2, r3, #4
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	602a      	str	r2, [r5, #0]
 8004970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004974:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004978:	2301      	movs	r3, #1
 800497a:	e0a3      	b.n	8004ac4 <_printf_i+0x1f4>
 800497c:	6820      	ldr	r0, [r4, #0]
 800497e:	6829      	ldr	r1, [r5, #0]
 8004980:	0606      	lsls	r6, r0, #24
 8004982:	f101 0304 	add.w	r3, r1, #4
 8004986:	d50a      	bpl.n	800499e <_printf_i+0xce>
 8004988:	680e      	ldr	r6, [r1, #0]
 800498a:	602b      	str	r3, [r5, #0]
 800498c:	2e00      	cmp	r6, #0
 800498e:	da03      	bge.n	8004998 <_printf_i+0xc8>
 8004990:	232d      	movs	r3, #45	; 0x2d
 8004992:	4276      	negs	r6, r6
 8004994:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004998:	485e      	ldr	r0, [pc, #376]	; (8004b14 <_printf_i+0x244>)
 800499a:	230a      	movs	r3, #10
 800499c:	e019      	b.n	80049d2 <_printf_i+0x102>
 800499e:	680e      	ldr	r6, [r1, #0]
 80049a0:	602b      	str	r3, [r5, #0]
 80049a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80049a6:	bf18      	it	ne
 80049a8:	b236      	sxthne	r6, r6
 80049aa:	e7ef      	b.n	800498c <_printf_i+0xbc>
 80049ac:	682b      	ldr	r3, [r5, #0]
 80049ae:	6820      	ldr	r0, [r4, #0]
 80049b0:	1d19      	adds	r1, r3, #4
 80049b2:	6029      	str	r1, [r5, #0]
 80049b4:	0601      	lsls	r1, r0, #24
 80049b6:	d501      	bpl.n	80049bc <_printf_i+0xec>
 80049b8:	681e      	ldr	r6, [r3, #0]
 80049ba:	e002      	b.n	80049c2 <_printf_i+0xf2>
 80049bc:	0646      	lsls	r6, r0, #25
 80049be:	d5fb      	bpl.n	80049b8 <_printf_i+0xe8>
 80049c0:	881e      	ldrh	r6, [r3, #0]
 80049c2:	4854      	ldr	r0, [pc, #336]	; (8004b14 <_printf_i+0x244>)
 80049c4:	2f6f      	cmp	r7, #111	; 0x6f
 80049c6:	bf0c      	ite	eq
 80049c8:	2308      	moveq	r3, #8
 80049ca:	230a      	movne	r3, #10
 80049cc:	2100      	movs	r1, #0
 80049ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049d2:	6865      	ldr	r5, [r4, #4]
 80049d4:	60a5      	str	r5, [r4, #8]
 80049d6:	2d00      	cmp	r5, #0
 80049d8:	bfa2      	ittt	ge
 80049da:	6821      	ldrge	r1, [r4, #0]
 80049dc:	f021 0104 	bicge.w	r1, r1, #4
 80049e0:	6021      	strge	r1, [r4, #0]
 80049e2:	b90e      	cbnz	r6, 80049e8 <_printf_i+0x118>
 80049e4:	2d00      	cmp	r5, #0
 80049e6:	d04d      	beq.n	8004a84 <_printf_i+0x1b4>
 80049e8:	4615      	mov	r5, r2
 80049ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80049ee:	fb03 6711 	mls	r7, r3, r1, r6
 80049f2:	5dc7      	ldrb	r7, [r0, r7]
 80049f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80049f8:	4637      	mov	r7, r6
 80049fa:	42bb      	cmp	r3, r7
 80049fc:	460e      	mov	r6, r1
 80049fe:	d9f4      	bls.n	80049ea <_printf_i+0x11a>
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d10b      	bne.n	8004a1c <_printf_i+0x14c>
 8004a04:	6823      	ldr	r3, [r4, #0]
 8004a06:	07de      	lsls	r6, r3, #31
 8004a08:	d508      	bpl.n	8004a1c <_printf_i+0x14c>
 8004a0a:	6923      	ldr	r3, [r4, #16]
 8004a0c:	6861      	ldr	r1, [r4, #4]
 8004a0e:	4299      	cmp	r1, r3
 8004a10:	bfde      	ittt	le
 8004a12:	2330      	movle	r3, #48	; 0x30
 8004a14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a1c:	1b52      	subs	r2, r2, r5
 8004a1e:	6122      	str	r2, [r4, #16]
 8004a20:	f8cd a000 	str.w	sl, [sp]
 8004a24:	464b      	mov	r3, r9
 8004a26:	aa03      	add	r2, sp, #12
 8004a28:	4621      	mov	r1, r4
 8004a2a:	4640      	mov	r0, r8
 8004a2c:	f7ff fee2 	bl	80047f4 <_printf_common>
 8004a30:	3001      	adds	r0, #1
 8004a32:	d14c      	bne.n	8004ace <_printf_i+0x1fe>
 8004a34:	f04f 30ff 	mov.w	r0, #4294967295
 8004a38:	b004      	add	sp, #16
 8004a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a3e:	4835      	ldr	r0, [pc, #212]	; (8004b14 <_printf_i+0x244>)
 8004a40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004a44:	6829      	ldr	r1, [r5, #0]
 8004a46:	6823      	ldr	r3, [r4, #0]
 8004a48:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a4c:	6029      	str	r1, [r5, #0]
 8004a4e:	061d      	lsls	r5, r3, #24
 8004a50:	d514      	bpl.n	8004a7c <_printf_i+0x1ac>
 8004a52:	07df      	lsls	r7, r3, #31
 8004a54:	bf44      	itt	mi
 8004a56:	f043 0320 	orrmi.w	r3, r3, #32
 8004a5a:	6023      	strmi	r3, [r4, #0]
 8004a5c:	b91e      	cbnz	r6, 8004a66 <_printf_i+0x196>
 8004a5e:	6823      	ldr	r3, [r4, #0]
 8004a60:	f023 0320 	bic.w	r3, r3, #32
 8004a64:	6023      	str	r3, [r4, #0]
 8004a66:	2310      	movs	r3, #16
 8004a68:	e7b0      	b.n	80049cc <_printf_i+0xfc>
 8004a6a:	6823      	ldr	r3, [r4, #0]
 8004a6c:	f043 0320 	orr.w	r3, r3, #32
 8004a70:	6023      	str	r3, [r4, #0]
 8004a72:	2378      	movs	r3, #120	; 0x78
 8004a74:	4828      	ldr	r0, [pc, #160]	; (8004b18 <_printf_i+0x248>)
 8004a76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a7a:	e7e3      	b.n	8004a44 <_printf_i+0x174>
 8004a7c:	0659      	lsls	r1, r3, #25
 8004a7e:	bf48      	it	mi
 8004a80:	b2b6      	uxthmi	r6, r6
 8004a82:	e7e6      	b.n	8004a52 <_printf_i+0x182>
 8004a84:	4615      	mov	r5, r2
 8004a86:	e7bb      	b.n	8004a00 <_printf_i+0x130>
 8004a88:	682b      	ldr	r3, [r5, #0]
 8004a8a:	6826      	ldr	r6, [r4, #0]
 8004a8c:	6961      	ldr	r1, [r4, #20]
 8004a8e:	1d18      	adds	r0, r3, #4
 8004a90:	6028      	str	r0, [r5, #0]
 8004a92:	0635      	lsls	r5, r6, #24
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	d501      	bpl.n	8004a9c <_printf_i+0x1cc>
 8004a98:	6019      	str	r1, [r3, #0]
 8004a9a:	e002      	b.n	8004aa2 <_printf_i+0x1d2>
 8004a9c:	0670      	lsls	r0, r6, #25
 8004a9e:	d5fb      	bpl.n	8004a98 <_printf_i+0x1c8>
 8004aa0:	8019      	strh	r1, [r3, #0]
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	6123      	str	r3, [r4, #16]
 8004aa6:	4615      	mov	r5, r2
 8004aa8:	e7ba      	b.n	8004a20 <_printf_i+0x150>
 8004aaa:	682b      	ldr	r3, [r5, #0]
 8004aac:	1d1a      	adds	r2, r3, #4
 8004aae:	602a      	str	r2, [r5, #0]
 8004ab0:	681d      	ldr	r5, [r3, #0]
 8004ab2:	6862      	ldr	r2, [r4, #4]
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	f7fb fb62 	bl	8000180 <memchr>
 8004abc:	b108      	cbz	r0, 8004ac2 <_printf_i+0x1f2>
 8004abe:	1b40      	subs	r0, r0, r5
 8004ac0:	6060      	str	r0, [r4, #4]
 8004ac2:	6863      	ldr	r3, [r4, #4]
 8004ac4:	6123      	str	r3, [r4, #16]
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004acc:	e7a8      	b.n	8004a20 <_printf_i+0x150>
 8004ace:	6923      	ldr	r3, [r4, #16]
 8004ad0:	462a      	mov	r2, r5
 8004ad2:	4649      	mov	r1, r9
 8004ad4:	4640      	mov	r0, r8
 8004ad6:	47d0      	blx	sl
 8004ad8:	3001      	adds	r0, #1
 8004ada:	d0ab      	beq.n	8004a34 <_printf_i+0x164>
 8004adc:	6823      	ldr	r3, [r4, #0]
 8004ade:	079b      	lsls	r3, r3, #30
 8004ae0:	d413      	bmi.n	8004b0a <_printf_i+0x23a>
 8004ae2:	68e0      	ldr	r0, [r4, #12]
 8004ae4:	9b03      	ldr	r3, [sp, #12]
 8004ae6:	4298      	cmp	r0, r3
 8004ae8:	bfb8      	it	lt
 8004aea:	4618      	movlt	r0, r3
 8004aec:	e7a4      	b.n	8004a38 <_printf_i+0x168>
 8004aee:	2301      	movs	r3, #1
 8004af0:	4632      	mov	r2, r6
 8004af2:	4649      	mov	r1, r9
 8004af4:	4640      	mov	r0, r8
 8004af6:	47d0      	blx	sl
 8004af8:	3001      	adds	r0, #1
 8004afa:	d09b      	beq.n	8004a34 <_printf_i+0x164>
 8004afc:	3501      	adds	r5, #1
 8004afe:	68e3      	ldr	r3, [r4, #12]
 8004b00:	9903      	ldr	r1, [sp, #12]
 8004b02:	1a5b      	subs	r3, r3, r1
 8004b04:	42ab      	cmp	r3, r5
 8004b06:	dcf2      	bgt.n	8004aee <_printf_i+0x21e>
 8004b08:	e7eb      	b.n	8004ae2 <_printf_i+0x212>
 8004b0a:	2500      	movs	r5, #0
 8004b0c:	f104 0619 	add.w	r6, r4, #25
 8004b10:	e7f5      	b.n	8004afe <_printf_i+0x22e>
 8004b12:	bf00      	nop
 8004b14:	08004f05 	.word	0x08004f05
 8004b18:	08004f16 	.word	0x08004f16

08004b1c <memcpy>:
 8004b1c:	440a      	add	r2, r1
 8004b1e:	4291      	cmp	r1, r2
 8004b20:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b24:	d100      	bne.n	8004b28 <memcpy+0xc>
 8004b26:	4770      	bx	lr
 8004b28:	b510      	push	{r4, lr}
 8004b2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b32:	4291      	cmp	r1, r2
 8004b34:	d1f9      	bne.n	8004b2a <memcpy+0xe>
 8004b36:	bd10      	pop	{r4, pc}

08004b38 <memmove>:
 8004b38:	4288      	cmp	r0, r1
 8004b3a:	b510      	push	{r4, lr}
 8004b3c:	eb01 0402 	add.w	r4, r1, r2
 8004b40:	d902      	bls.n	8004b48 <memmove+0x10>
 8004b42:	4284      	cmp	r4, r0
 8004b44:	4623      	mov	r3, r4
 8004b46:	d807      	bhi.n	8004b58 <memmove+0x20>
 8004b48:	1e43      	subs	r3, r0, #1
 8004b4a:	42a1      	cmp	r1, r4
 8004b4c:	d008      	beq.n	8004b60 <memmove+0x28>
 8004b4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b56:	e7f8      	b.n	8004b4a <memmove+0x12>
 8004b58:	4402      	add	r2, r0
 8004b5a:	4601      	mov	r1, r0
 8004b5c:	428a      	cmp	r2, r1
 8004b5e:	d100      	bne.n	8004b62 <memmove+0x2a>
 8004b60:	bd10      	pop	{r4, pc}
 8004b62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b6a:	e7f7      	b.n	8004b5c <memmove+0x24>

08004b6c <_free_r>:
 8004b6c:	b538      	push	{r3, r4, r5, lr}
 8004b6e:	4605      	mov	r5, r0
 8004b70:	2900      	cmp	r1, #0
 8004b72:	d041      	beq.n	8004bf8 <_free_r+0x8c>
 8004b74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b78:	1f0c      	subs	r4, r1, #4
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	bfb8      	it	lt
 8004b7e:	18e4      	addlt	r4, r4, r3
 8004b80:	f000 f912 	bl	8004da8 <__malloc_lock>
 8004b84:	4a1d      	ldr	r2, [pc, #116]	; (8004bfc <_free_r+0x90>)
 8004b86:	6813      	ldr	r3, [r2, #0]
 8004b88:	b933      	cbnz	r3, 8004b98 <_free_r+0x2c>
 8004b8a:	6063      	str	r3, [r4, #4]
 8004b8c:	6014      	str	r4, [r2, #0]
 8004b8e:	4628      	mov	r0, r5
 8004b90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b94:	f000 b90e 	b.w	8004db4 <__malloc_unlock>
 8004b98:	42a3      	cmp	r3, r4
 8004b9a:	d908      	bls.n	8004bae <_free_r+0x42>
 8004b9c:	6820      	ldr	r0, [r4, #0]
 8004b9e:	1821      	adds	r1, r4, r0
 8004ba0:	428b      	cmp	r3, r1
 8004ba2:	bf01      	itttt	eq
 8004ba4:	6819      	ldreq	r1, [r3, #0]
 8004ba6:	685b      	ldreq	r3, [r3, #4]
 8004ba8:	1809      	addeq	r1, r1, r0
 8004baa:	6021      	streq	r1, [r4, #0]
 8004bac:	e7ed      	b.n	8004b8a <_free_r+0x1e>
 8004bae:	461a      	mov	r2, r3
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	b10b      	cbz	r3, 8004bb8 <_free_r+0x4c>
 8004bb4:	42a3      	cmp	r3, r4
 8004bb6:	d9fa      	bls.n	8004bae <_free_r+0x42>
 8004bb8:	6811      	ldr	r1, [r2, #0]
 8004bba:	1850      	adds	r0, r2, r1
 8004bbc:	42a0      	cmp	r0, r4
 8004bbe:	d10b      	bne.n	8004bd8 <_free_r+0x6c>
 8004bc0:	6820      	ldr	r0, [r4, #0]
 8004bc2:	4401      	add	r1, r0
 8004bc4:	1850      	adds	r0, r2, r1
 8004bc6:	4283      	cmp	r3, r0
 8004bc8:	6011      	str	r1, [r2, #0]
 8004bca:	d1e0      	bne.n	8004b8e <_free_r+0x22>
 8004bcc:	6818      	ldr	r0, [r3, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	6053      	str	r3, [r2, #4]
 8004bd2:	4401      	add	r1, r0
 8004bd4:	6011      	str	r1, [r2, #0]
 8004bd6:	e7da      	b.n	8004b8e <_free_r+0x22>
 8004bd8:	d902      	bls.n	8004be0 <_free_r+0x74>
 8004bda:	230c      	movs	r3, #12
 8004bdc:	602b      	str	r3, [r5, #0]
 8004bde:	e7d6      	b.n	8004b8e <_free_r+0x22>
 8004be0:	6820      	ldr	r0, [r4, #0]
 8004be2:	1821      	adds	r1, r4, r0
 8004be4:	428b      	cmp	r3, r1
 8004be6:	bf04      	itt	eq
 8004be8:	6819      	ldreq	r1, [r3, #0]
 8004bea:	685b      	ldreq	r3, [r3, #4]
 8004bec:	6063      	str	r3, [r4, #4]
 8004bee:	bf04      	itt	eq
 8004bf0:	1809      	addeq	r1, r1, r0
 8004bf2:	6021      	streq	r1, [r4, #0]
 8004bf4:	6054      	str	r4, [r2, #4]
 8004bf6:	e7ca      	b.n	8004b8e <_free_r+0x22>
 8004bf8:	bd38      	pop	{r3, r4, r5, pc}
 8004bfa:	bf00      	nop
 8004bfc:	20000270 	.word	0x20000270

08004c00 <sbrk_aligned>:
 8004c00:	b570      	push	{r4, r5, r6, lr}
 8004c02:	4e0e      	ldr	r6, [pc, #56]	; (8004c3c <sbrk_aligned+0x3c>)
 8004c04:	460c      	mov	r4, r1
 8004c06:	6831      	ldr	r1, [r6, #0]
 8004c08:	4605      	mov	r5, r0
 8004c0a:	b911      	cbnz	r1, 8004c12 <sbrk_aligned+0x12>
 8004c0c:	f000 f8bc 	bl	8004d88 <_sbrk_r>
 8004c10:	6030      	str	r0, [r6, #0]
 8004c12:	4621      	mov	r1, r4
 8004c14:	4628      	mov	r0, r5
 8004c16:	f000 f8b7 	bl	8004d88 <_sbrk_r>
 8004c1a:	1c43      	adds	r3, r0, #1
 8004c1c:	d00a      	beq.n	8004c34 <sbrk_aligned+0x34>
 8004c1e:	1cc4      	adds	r4, r0, #3
 8004c20:	f024 0403 	bic.w	r4, r4, #3
 8004c24:	42a0      	cmp	r0, r4
 8004c26:	d007      	beq.n	8004c38 <sbrk_aligned+0x38>
 8004c28:	1a21      	subs	r1, r4, r0
 8004c2a:	4628      	mov	r0, r5
 8004c2c:	f000 f8ac 	bl	8004d88 <_sbrk_r>
 8004c30:	3001      	adds	r0, #1
 8004c32:	d101      	bne.n	8004c38 <sbrk_aligned+0x38>
 8004c34:	f04f 34ff 	mov.w	r4, #4294967295
 8004c38:	4620      	mov	r0, r4
 8004c3a:	bd70      	pop	{r4, r5, r6, pc}
 8004c3c:	20000274 	.word	0x20000274

08004c40 <_malloc_r>:
 8004c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c44:	1ccd      	adds	r5, r1, #3
 8004c46:	f025 0503 	bic.w	r5, r5, #3
 8004c4a:	3508      	adds	r5, #8
 8004c4c:	2d0c      	cmp	r5, #12
 8004c4e:	bf38      	it	cc
 8004c50:	250c      	movcc	r5, #12
 8004c52:	2d00      	cmp	r5, #0
 8004c54:	4607      	mov	r7, r0
 8004c56:	db01      	blt.n	8004c5c <_malloc_r+0x1c>
 8004c58:	42a9      	cmp	r1, r5
 8004c5a:	d905      	bls.n	8004c68 <_malloc_r+0x28>
 8004c5c:	230c      	movs	r3, #12
 8004c5e:	603b      	str	r3, [r7, #0]
 8004c60:	2600      	movs	r6, #0
 8004c62:	4630      	mov	r0, r6
 8004c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c68:	4e2e      	ldr	r6, [pc, #184]	; (8004d24 <_malloc_r+0xe4>)
 8004c6a:	f000 f89d 	bl	8004da8 <__malloc_lock>
 8004c6e:	6833      	ldr	r3, [r6, #0]
 8004c70:	461c      	mov	r4, r3
 8004c72:	bb34      	cbnz	r4, 8004cc2 <_malloc_r+0x82>
 8004c74:	4629      	mov	r1, r5
 8004c76:	4638      	mov	r0, r7
 8004c78:	f7ff ffc2 	bl	8004c00 <sbrk_aligned>
 8004c7c:	1c43      	adds	r3, r0, #1
 8004c7e:	4604      	mov	r4, r0
 8004c80:	d14d      	bne.n	8004d1e <_malloc_r+0xde>
 8004c82:	6834      	ldr	r4, [r6, #0]
 8004c84:	4626      	mov	r6, r4
 8004c86:	2e00      	cmp	r6, #0
 8004c88:	d140      	bne.n	8004d0c <_malloc_r+0xcc>
 8004c8a:	6823      	ldr	r3, [r4, #0]
 8004c8c:	4631      	mov	r1, r6
 8004c8e:	4638      	mov	r0, r7
 8004c90:	eb04 0803 	add.w	r8, r4, r3
 8004c94:	f000 f878 	bl	8004d88 <_sbrk_r>
 8004c98:	4580      	cmp	r8, r0
 8004c9a:	d13a      	bne.n	8004d12 <_malloc_r+0xd2>
 8004c9c:	6821      	ldr	r1, [r4, #0]
 8004c9e:	3503      	adds	r5, #3
 8004ca0:	1a6d      	subs	r5, r5, r1
 8004ca2:	f025 0503 	bic.w	r5, r5, #3
 8004ca6:	3508      	adds	r5, #8
 8004ca8:	2d0c      	cmp	r5, #12
 8004caa:	bf38      	it	cc
 8004cac:	250c      	movcc	r5, #12
 8004cae:	4629      	mov	r1, r5
 8004cb0:	4638      	mov	r0, r7
 8004cb2:	f7ff ffa5 	bl	8004c00 <sbrk_aligned>
 8004cb6:	3001      	adds	r0, #1
 8004cb8:	d02b      	beq.n	8004d12 <_malloc_r+0xd2>
 8004cba:	6823      	ldr	r3, [r4, #0]
 8004cbc:	442b      	add	r3, r5
 8004cbe:	6023      	str	r3, [r4, #0]
 8004cc0:	e00e      	b.n	8004ce0 <_malloc_r+0xa0>
 8004cc2:	6822      	ldr	r2, [r4, #0]
 8004cc4:	1b52      	subs	r2, r2, r5
 8004cc6:	d41e      	bmi.n	8004d06 <_malloc_r+0xc6>
 8004cc8:	2a0b      	cmp	r2, #11
 8004cca:	d916      	bls.n	8004cfa <_malloc_r+0xba>
 8004ccc:	1961      	adds	r1, r4, r5
 8004cce:	42a3      	cmp	r3, r4
 8004cd0:	6025      	str	r5, [r4, #0]
 8004cd2:	bf18      	it	ne
 8004cd4:	6059      	strne	r1, [r3, #4]
 8004cd6:	6863      	ldr	r3, [r4, #4]
 8004cd8:	bf08      	it	eq
 8004cda:	6031      	streq	r1, [r6, #0]
 8004cdc:	5162      	str	r2, [r4, r5]
 8004cde:	604b      	str	r3, [r1, #4]
 8004ce0:	4638      	mov	r0, r7
 8004ce2:	f104 060b 	add.w	r6, r4, #11
 8004ce6:	f000 f865 	bl	8004db4 <__malloc_unlock>
 8004cea:	f026 0607 	bic.w	r6, r6, #7
 8004cee:	1d23      	adds	r3, r4, #4
 8004cf0:	1af2      	subs	r2, r6, r3
 8004cf2:	d0b6      	beq.n	8004c62 <_malloc_r+0x22>
 8004cf4:	1b9b      	subs	r3, r3, r6
 8004cf6:	50a3      	str	r3, [r4, r2]
 8004cf8:	e7b3      	b.n	8004c62 <_malloc_r+0x22>
 8004cfa:	6862      	ldr	r2, [r4, #4]
 8004cfc:	42a3      	cmp	r3, r4
 8004cfe:	bf0c      	ite	eq
 8004d00:	6032      	streq	r2, [r6, #0]
 8004d02:	605a      	strne	r2, [r3, #4]
 8004d04:	e7ec      	b.n	8004ce0 <_malloc_r+0xa0>
 8004d06:	4623      	mov	r3, r4
 8004d08:	6864      	ldr	r4, [r4, #4]
 8004d0a:	e7b2      	b.n	8004c72 <_malloc_r+0x32>
 8004d0c:	4634      	mov	r4, r6
 8004d0e:	6876      	ldr	r6, [r6, #4]
 8004d10:	e7b9      	b.n	8004c86 <_malloc_r+0x46>
 8004d12:	230c      	movs	r3, #12
 8004d14:	603b      	str	r3, [r7, #0]
 8004d16:	4638      	mov	r0, r7
 8004d18:	f000 f84c 	bl	8004db4 <__malloc_unlock>
 8004d1c:	e7a1      	b.n	8004c62 <_malloc_r+0x22>
 8004d1e:	6025      	str	r5, [r4, #0]
 8004d20:	e7de      	b.n	8004ce0 <_malloc_r+0xa0>
 8004d22:	bf00      	nop
 8004d24:	20000270 	.word	0x20000270

08004d28 <_realloc_r>:
 8004d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d2c:	4680      	mov	r8, r0
 8004d2e:	4614      	mov	r4, r2
 8004d30:	460e      	mov	r6, r1
 8004d32:	b921      	cbnz	r1, 8004d3e <_realloc_r+0x16>
 8004d34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d38:	4611      	mov	r1, r2
 8004d3a:	f7ff bf81 	b.w	8004c40 <_malloc_r>
 8004d3e:	b92a      	cbnz	r2, 8004d4c <_realloc_r+0x24>
 8004d40:	f7ff ff14 	bl	8004b6c <_free_r>
 8004d44:	4625      	mov	r5, r4
 8004d46:	4628      	mov	r0, r5
 8004d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d4c:	f000 f838 	bl	8004dc0 <_malloc_usable_size_r>
 8004d50:	4284      	cmp	r4, r0
 8004d52:	4607      	mov	r7, r0
 8004d54:	d802      	bhi.n	8004d5c <_realloc_r+0x34>
 8004d56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004d5a:	d812      	bhi.n	8004d82 <_realloc_r+0x5a>
 8004d5c:	4621      	mov	r1, r4
 8004d5e:	4640      	mov	r0, r8
 8004d60:	f7ff ff6e 	bl	8004c40 <_malloc_r>
 8004d64:	4605      	mov	r5, r0
 8004d66:	2800      	cmp	r0, #0
 8004d68:	d0ed      	beq.n	8004d46 <_realloc_r+0x1e>
 8004d6a:	42bc      	cmp	r4, r7
 8004d6c:	4622      	mov	r2, r4
 8004d6e:	4631      	mov	r1, r6
 8004d70:	bf28      	it	cs
 8004d72:	463a      	movcs	r2, r7
 8004d74:	f7ff fed2 	bl	8004b1c <memcpy>
 8004d78:	4631      	mov	r1, r6
 8004d7a:	4640      	mov	r0, r8
 8004d7c:	f7ff fef6 	bl	8004b6c <_free_r>
 8004d80:	e7e1      	b.n	8004d46 <_realloc_r+0x1e>
 8004d82:	4635      	mov	r5, r6
 8004d84:	e7df      	b.n	8004d46 <_realloc_r+0x1e>
	...

08004d88 <_sbrk_r>:
 8004d88:	b538      	push	{r3, r4, r5, lr}
 8004d8a:	4d06      	ldr	r5, [pc, #24]	; (8004da4 <_sbrk_r+0x1c>)
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	4604      	mov	r4, r0
 8004d90:	4608      	mov	r0, r1
 8004d92:	602b      	str	r3, [r5, #0]
 8004d94:	f7fc f806 	bl	8000da4 <_sbrk>
 8004d98:	1c43      	adds	r3, r0, #1
 8004d9a:	d102      	bne.n	8004da2 <_sbrk_r+0x1a>
 8004d9c:	682b      	ldr	r3, [r5, #0]
 8004d9e:	b103      	cbz	r3, 8004da2 <_sbrk_r+0x1a>
 8004da0:	6023      	str	r3, [r4, #0]
 8004da2:	bd38      	pop	{r3, r4, r5, pc}
 8004da4:	20000278 	.word	0x20000278

08004da8 <__malloc_lock>:
 8004da8:	4801      	ldr	r0, [pc, #4]	; (8004db0 <__malloc_lock+0x8>)
 8004daa:	f000 b811 	b.w	8004dd0 <__retarget_lock_acquire_recursive>
 8004dae:	bf00      	nop
 8004db0:	2000027c 	.word	0x2000027c

08004db4 <__malloc_unlock>:
 8004db4:	4801      	ldr	r0, [pc, #4]	; (8004dbc <__malloc_unlock+0x8>)
 8004db6:	f000 b80c 	b.w	8004dd2 <__retarget_lock_release_recursive>
 8004dba:	bf00      	nop
 8004dbc:	2000027c 	.word	0x2000027c

08004dc0 <_malloc_usable_size_r>:
 8004dc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dc4:	1f18      	subs	r0, r3, #4
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	bfbc      	itt	lt
 8004dca:	580b      	ldrlt	r3, [r1, r0]
 8004dcc:	18c0      	addlt	r0, r0, r3
 8004dce:	4770      	bx	lr

08004dd0 <__retarget_lock_acquire_recursive>:
 8004dd0:	4770      	bx	lr

08004dd2 <__retarget_lock_release_recursive>:
 8004dd2:	4770      	bx	lr

08004dd4 <_init>:
 8004dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dd6:	bf00      	nop
 8004dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dda:	bc08      	pop	{r3}
 8004ddc:	469e      	mov	lr, r3
 8004dde:	4770      	bx	lr

08004de0 <_fini>:
 8004de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004de2:	bf00      	nop
 8004de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004de6:	bc08      	pop	{r3}
 8004de8:	469e      	mov	lr, r3
 8004dea:	4770      	bx	lr
